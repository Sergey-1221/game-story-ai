"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö AI –∏ PCG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import time
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from src.core.models import (
    ScenarioInput, ContentGenerationRequest, GenerationConfig
)
from src.modules.hybrid_pipeline import (
    HybridContentPipeline, PipelineConfig, IntegrationStrategy, PipelineStage
)
from src.modules.level_generator import LevelConfig
from src.modules.diffusion_visualizer import VisualizationConfig, VisualizationStyle
from src.modules.narrative_enhancer import EnhancementConfig
from src.modules.game_engine_exporters import ExportConfig, GameEngine


async def demo_sequential_pipeline():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê ===\n")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
    config = PipelineConfig(
        integration_strategy=IntegrationStrategy.SEQUENTIAL,
        enabled_stages=[
            PipelineStage.NARRATIVE_GENERATION,
            PipelineStage.LEVEL_GENERATION,
            PipelineStage.OBJECT_PLACEMENT,
            PipelineStage.QUALITY_ASSESSMENT
        ],
        quality_threshold=0.7,
        max_iterations=2,
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        generation_config=GenerationConfig(
            model="gpt-4",
            temperature=0.8,
            max_tokens=1500,
            use_rag=True
        ),
        
        level_config=LevelConfig(
            width=24,
            height=24,
            algorithm="hybrid",
            seed=42
        )
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = HybridContentPipeline(config)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    scenario = ScenarioInput(
        genre="–∫–∏–±–µ—Ä–ø–∞–Ω–∫",
        hero="–æ–ø—ã—Ç–Ω—ã–π —Ö–∞–∫–µ—Ä-–Ω–∞–µ–º–Ω–∏–∫ —Å –∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–º–ø–ª–∞–Ω—Ç–∞–º–∏",
        goal="–ø—Ä–æ–Ω–∏–∫–Ω—É—Ç—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä –∏ —É–∫—Ä–∞—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –ò–ò"
    )
    
    print(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.genre}")
    print(f"–ì–µ—Ä–æ–π: {scenario.hero}")
    print(f"–¶–µ–ª—å: {scenario.goal}\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    start_time = time.time()
    result = await pipeline.generate_content(scenario)
    total_time = time.time() - start_time
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {result.final_quality_score:.2f}")
    print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —ç—Ç–∞–ø–æ–≤: {len(result.stages_completed)}")
    print(f"‚ö° –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.iterations_performed}\n")
    
    if result.quest:
        print(f"üìñ –ö–≤–µ—Å—Ç: '{result.quest.title}'")
        print(f"   –°—Ü–µ–Ω: {len(result.quest.scenes)}")
        print(f"   –í—ã–±–æ—Ä–æ–≤: {sum(len(scene.choices) for scene in result.quest.scenes)}")
    
    if result.level:
        print(f"üó∫Ô∏è  –£—Ä–æ–≤–µ–Ω—å: {result.level.width}x{result.level.height}")
        print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º: {result.level.metadata.get('algorithm', 'Unknown')}")
        print(f"   –¢–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞: {len(result.level.spawn_points)}")
        print(f"   –¶–µ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏: {len(result.level.goal_points)}")
    
    if result.objects:
        print(f"üéØ –û–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(result.objects)}")
        object_types = {}
        for obj in result.objects:
            obj_type = obj.object_type.value
            object_types[obj_type] = object_types.get(obj_type, 0) + 1
        
        for obj_type, count in object_types.items():
            print(f"   {obj_type}: {count}")
    
    if result.quality_report:
        print(f"\nüìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
        for dimension, score in result.quality_report.dimension_scores.items():
            print(f"   {dimension.value}: {score.score:.2f}")
    
    # –¢–∞–π–º–∏—Ä–æ–≤–∫–∏ —ç—Ç–∞–ø–æ–≤
    if result.stage_timings:
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤:")
        for stage, timing in result.stage_timings.items():
            print(f"   {stage.value}: {timing:.2f}—Å")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    pipeline.export_pipeline_result(result, "output/sequential_demo_result.json")
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ output/sequential_demo_result.json")
    
    return result


async def demo_collaborative_pipeline():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –º–µ–∂–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
    
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–û–í–ú–ï–°–¢–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê ===\n")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    config = PipelineConfig(
        integration_strategy=IntegrationStrategy.COLLABORATIVE,
        enabled_stages=[
            PipelineStage.NARRATIVE_GENERATION,
            PipelineStage.LEVEL_GENERATION,
            PipelineStage.OBJECT_PLACEMENT,
            PipelineStage.VISUAL_GENERATION,
            PipelineStage.NARRATIVE_ENHANCEMENT,
            PipelineStage.QUALITY_ASSESSMENT
        ],
        quality_threshold=0.75,
        max_iterations=3,
        enable_cross_modal_feedback=True,
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        visualization_config=VisualizationConfig(
            style=VisualizationStyle.CYBERPUNK,
            image_size=(512, 512),
            num_inference_steps=15,
            use_controlnet=False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –¥–µ–º–æ
        ),
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞
        enhancement_config=EnhancementConfig(
            target_quality_threshold=0.8,
            max_iterations=2,
            use_adversarial_feedback=True
        )
    )
    
    pipeline = HybridContentPipeline(config)
    
    # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario = ScenarioInput(
        genre="—Ñ—ç–Ω—Ç–µ–∑–∏",
        hero="–º–æ–ª–æ–¥–∞—è —ç–ª—å—Ñ–∏–π—Å–∫–∞—è –º–∞–≥-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ —Å —Ä–µ–¥–∫–∏–º –¥–∞—Ä–æ–º –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è",
        goal="–Ω–∞–π—Ç–∏ —É—Ç–µ—Ä—è–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ä—É–∏–Ω–∞—Ö –¥—Ä–µ–≤–Ω–µ–≥–æ —Ö—Ä–∞–º–∞, –∏–∑–±–µ–≥–∞—è –ª–æ–≤—É—à–µ–∫ –∏ —Ä–µ—à–∞—è –º–∞–≥–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏"
    )
    
    print(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.genre}")
    print(f"–ì–µ—Ä–æ–π: {scenario.hero}")
    print(f"–¶–µ–ª—å: {scenario.goal}\n")
    
    start_time = time.time()
    result = await pipeline.generate_content(scenario)
    total_time = time.time() - start_time
    
    print(f"‚úÖ –°–æ–≤–º–µ—Å—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {result.final_quality_score:.2f}")
    print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —ç—Ç–∞–ø–æ–≤: {len(result.stages_completed)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞
    if result.narrative_analysis:
        print(f"\nüìù –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞:")
        print(f"   –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {result.narrative_analysis.overall_quality:.2f}")
        print(f"   –°–≤—è–∑–Ω–æ—Å—Ç—å: {result.narrative_analysis.coherence_score:.2f}")
        print(f"   –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {result.narrative_analysis.engagement_score:.2f}")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {result.narrative_analysis.originality_score:.2f}")
        
        if result.narrative_analysis.suggestions:
            print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(result.narrative_analysis.suggestions)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è—Ö
    if result.visualizations:
        print(f"\nüé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {len(result.visualizations)}")
        for i, viz in enumerate(result.visualizations):
            print(f"   –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è {i+1}: {viz.metadata.get('style', 'Unknown')} —Å—Ç–∏–ª—å")
    
    # –õ–æ–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if result.optimization_log:
        print(f"\nüîß –õ–æ–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        for log_entry in result.optimization_log:
            print(f"   - {log_entry}")
    
    pipeline.export_pipeline_result(result, "output/collaborative_demo_result.json")
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ output/collaborative_demo_result.json")
    
    return result


async def demo_adaptive_pipeline():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê ===\n")
    
    config = PipelineConfig(
        integration_strategy=IntegrationStrategy.ADAPTIVE,
        enabled_stages=[
            PipelineStage.NARRATIVE_GENERATION,
            PipelineStage.LEVEL_GENERATION,
            PipelineStage.OBJECT_PLACEMENT,
            PipelineStage.QUALITY_ASSESSMENT
        ],
        quality_threshold=0.8,
        max_iterations=4,
        memory_optimization=True,
        parallel_workers=1  # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–º–æ
    )
    
    pipeline = HybridContentPipeline(config)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    scenario = ScenarioInput(
        genre="—Ö–æ—Ä—Ä–æ—Ä",
        hero="–ø–∞—Ä–∞–Ω–æ–∏–¥–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤ —Å –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç—Ä–µ—Å—Å–æ–º",
        goal="—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–µ—Ä–∏—é –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–π –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–º –ø—Å–∏—Ö–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ"
    )
    
    print(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.genre}")
    print(f"–ì–µ—Ä–æ–π: {scenario.hero}")
    print(f"–¶–µ–ª—å: {scenario.goal}\n")
    
    start_time = time.time()
    result = await pipeline.generate_content(scenario)
    total_time = time.time() - start_time
    
    print(f"‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {result.final_quality_score:.2f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    print(f"\nü§ñ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    if result.optimization_log:
        for log_entry in result.optimization_log:
            print(f"   - {log_entry}")
    else:
        print("   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å")
    
    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    if result.memory_usage:
        print(f"\nüíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
        for component, usage in result.memory_usage.items():
            print(f"   {component}: {usage:.2f}")
    
    pipeline.export_pipeline_result(result, "output/adaptive_demo_result.json")
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ output/adaptive_demo_result.json")
    
    return result


async def demo_export_functionality():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –≠–ö–°–ü–û–†–¢–ê –í –ò–ì–†–û–í–´–ï –î–í–ò–ñ–ö–ò ===\n")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    export_configs = [
        ExportConfig(
            target_engine=GameEngine.UNITY,
            export_format="json",
            output_directory="output/exports",
            include_visuals=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –¥–µ–º–æ
            compress_output=True
        ),
        ExportConfig(
            target_engine=GameEngine.UNREAL_ENGINE,
            export_format="json", 
            output_directory="output/exports",
            include_visuals=False,
            compress_output=True
        )
    ]
    
    config = PipelineConfig(
        integration_strategy=IntegrationStrategy.SEQUENTIAL,
        enabled_stages=[
            PipelineStage.NARRATIVE_GENERATION,
            PipelineStage.LEVEL_GENERATION,
            PipelineStage.OBJECT_PLACEMENT,
            PipelineStage.EXPORT
        ],
        export_configs=export_configs
    )
    
    pipeline = HybridContentPipeline(config)
    
    scenario = ScenarioInput(
        genre="—Å—Ç–∏–º–ø–∞–Ω–∫",
        hero="–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å-–º–µ—Ö–∞–Ω–∏–∫ —Å –ø–∞—Ä–æ–≤—ã–º —ç–∫–∑–æ—Å–∫–µ–ª–µ—Ç–æ–º",
        goal="–ø–æ—á–∏–Ω–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞, –±–æ—Ä—è—Å—å —Å —Å–∞–±–æ—Ç–∞–∂–Ω–∏–∫–∞–º–∏ –∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç—Ä–∞–∂–∞–º–∏"
    )
    
    print(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.genre}")
    print(f"–ì–µ—Ä–æ–π: {scenario.hero}")
    print(f"–¶–µ–ª—å: {scenario.goal}\n")
    
    start_time = time.time()
    result = await pipeline.generate_content(scenario)
    total_time = time.time() - start_time
    
    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {result.final_quality_score:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç
    if PipelineStage.EXPORT in result.stages_completed:
        print(f"\nüì¶ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {len(export_configs)} –¥–≤–∏–∂–∫–æ–≤:")
        for export_config in export_configs:
            print(f"   - {export_config.target_engine.value}")
    
    pipeline.export_pipeline_result(result, "output/export_demo_result.json")
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ output/export_demo_result.json")
    
    return result


def compare_pipeline_results(results: list, names: list):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤"""
    
    print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–ê–ô–ü–õ–ê–ô–ù–û–í ===\n")
    
    print(f"{'–ü–∞–π–ø–ª–∞–π–Ω':<20} {'–í—Ä–µ–º—è (—Å)':<10} {'–ö–∞—á–µ—Å—Ç–≤–æ':<10} {'–≠—Ç–∞–ø–æ–≤':<8} {'–°—Ü–µ–Ω':<6}")
    print("-" * 60)
    
    for result, name in zip(results, names):
        print(f"{name:<20} {result.generation_time:<10.2f} {result.final_quality_score:<10.2f} "
              f"{len(result.stages_completed):<8} {len(result.quest.scenes) if result.quest else 0:<6}")
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    best_idx = max(range(len(results)), key=lambda i: results[i].final_quality_score)
    print(f"\nüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {names[best_idx]} (–∫–∞—á–µ—Å—Ç–≤–æ: {results[best_idx].final_quality_score:.2f})")
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π
    fastest_idx = min(range(len(results)), key=lambda i: results[i].generation_time)
    print(f"‚ö° –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: {names[fastest_idx]} ({results[fastest_idx].generation_time:.2f}—Å)")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ì–†–û–í–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    Path("output").mkdir(exist_ok=True)
    Path("output/exports").mkdir(exist_ok=True)
    
    results = []
    names = []
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        result1 = await demo_sequential_pipeline()
        results.append(result1)
        names.append("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        result2 = await demo_collaborative_pipeline()
        results.append(result2)
        names.append("–°–æ–≤–º–µ—Å—Ç–Ω—ã–π")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        result3 = await demo_adaptive_pipeline()
        results.append(result3)
        names.append("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        result4 = await demo_export_functionality()
        results.append(result4)
        names.append("–° —ç–∫—Å–ø–æ—Ä—Ç–æ–º")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        compare_pipeline_results(results, names)
        
        print("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'output/'")
        print("üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ 'output/exports/'")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(main())