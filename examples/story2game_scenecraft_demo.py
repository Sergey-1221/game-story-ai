"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ö–æ–¥–æ–≤ Story2Game –∏ SceneCraft
"""

import asyncio
from pathlib import Path
import json
import sys
sys.path.append(str(Path(__file__).parent.parent))

from loguru import logger

from src.modules.integrated_quest_generator import IntegratedQuestGenerator
from src.core.models import ScenarioInput, GenerationConfig


async def demo_integrated_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.add("logs/integrated_demo.log", rotation="10 MB")
    
    print("üéÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = GenerationConfig(
        model="gpt-4o-mini",
        temperature=0.8,
        use_rag=True,
        ensure_branching_depth=3
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    generator = IntegratedQuestGenerator(config)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    scenario = ScenarioInput(
        genre="–∫–∏–±–µ—Ä–ø–∞–Ω–∫",
        hero="—Ö–∞–∫–µ—Ä-–æ–¥–∏–Ω–æ—á–∫–∞ –ø–æ –ø—Ä–æ–∑–≤–∏—â—É –ü—Ä–∏–∑—Ä–∞–∫",
        goal="–ø—Ä–æ–Ω–∏–∫–Ω—É—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –∏ —É–∫—Ä–∞—Å—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —á–∏–ø",
        language="ru"
    )
    
    print(f"\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π:")
    print(f"   –ñ–∞–Ω—Ä: {scenario.genre}")
    print(f"   –ì–µ—Ä–æ–π: {scenario.hero}")
    print(f"   –¶–µ–ª—å: {scenario.goal}")
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π Story2Game
    print("\n1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ª–æ–≥–∏–∫–æ–π Story2Game...")
    result_logic = await generator.generate_enhanced_quest(
        scenario,
        with_logic=True,
        with_visuals=False,
        export_code=True
    )
    
    print("‚úÖ –õ–æ–≥–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
    print(f"   - –î–µ–π—Å—Ç–≤–∏–π: {len(result_logic['enhancements']['logic']['story_actions'])}")
    print(f"   - –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏–π: {len(result_logic['enhancements']['logic']['preconditions'])}")
    print(f"   - –≠—Ñ—Ñ–µ–∫—Ç–æ–≤: {len(result_logic['enhancements']['logic']['effects'])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    if "generated_code" in result_logic["enhancements"]:
        print("\nüìÑ –§—Ä–∞–≥–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
        code_lines = result_logic["enhancements"]["generated_code"].split('\n')[:20]
        for line in code_lines:
            print(f"   {line}")
        print("   ...")
    
    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π SceneCraft
    print("\n2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π SceneCraft...")
    result_visual = await generator.generate_enhanced_quest(
        scenario,
        with_logic=False,
        with_visuals=True,
        export_code=False
    )
    
    print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
    viz_data = result_visual['enhancements']['visualization']
    print(f"   - –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω: {len(viz_data['scenes'])}")
    print(f"   - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª–æ–≤: {viz_data['enhanced_features']['visual_consistency_score']:.2%}")
    
    # 3. –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Story2Game + SceneCraft
    print("\n3Ô∏è‚É£ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Story2Game + SceneCraft...")
    result_full = await generator.generate_enhanced_quest(
        scenario,
        with_logic=True,
        with_visuals=True,
        export_code=True
    )
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!")
    integrated = result_full['enhancements'].get('integrated', {})
    print(f"   - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω: {len(integrated.get('interactive_scenes', []))}")
    print(f"   - –í–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {len(integrated.get('visual_triggers', []))}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω—ã
    if integrated.get('interactive_scenes'):
        scene = integrated['interactive_scenes'][0]
        print(f"\nüé¨ –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω—ã '{scene['scene_id']}':")
        print(f"   - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(scene['interactive_objects'])}")
        
        for obj in scene['interactive_objects'][:3]:
            print(f"   ‚Ä¢ {obj['object']['label']}:")
            for interaction in obj['interactions'][:2]:
                print(f"     - {interaction['type']}: {interaction.get('action', 'N/A')}")
    
    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π...")
    
    # –í–∫–ª—é—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    generator.enable_dynamic_actions = True
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
    if result_full['quest'].scenes:
        first_scene = result_full['quest'].scenes[0]
        world_state = generator.story2game.world_state
        
        user_action = "–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—É—é —Ä–µ—à–µ—Ç–∫—É –Ω–∞ –ø–æ—Ç–æ–ª–∫–µ"
        print(f"   –ò–≥—Ä–æ–∫: '{user_action}'")
        
        dynamic_response = await generator.generate_dynamic_response(
            first_scene,
            user_action,
            world_state
        )
        
        if dynamic_response['success']:
            print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞: {dynamic_response['action']}")
            print("   –ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏:")
            for option in dynamic_response['new_options'][:3]:
                print(f"     ‚Ä¢ {option}")
        else:
            print(f"   ‚ùå {dynamic_response['message']}")
    
    # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    output_dir = "output/integrated_demo"
    saved_path = generator.save_enhanced_quest(result_full, output_dir)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {saved_path}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print(f"   - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result_full['metadata']['generation_time']:.2f} —Å–µ–∫")
    print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result_full['quest'].metadata.get('tokens_used', 'N/A')}")
    print(f"   - –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(k for k, v in result_full['metadata']['features_enabled'].items() if v)}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–≤–µ—Å—Ç–∞
    print("\nüó∫Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞:")
    quest = result_full['quest']
    for scene in quest.scenes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ü–µ–Ω
        print(f"\n   [{scene.scene_id}] {scene.text[:100]}...")
        for i, choice in enumerate(scene.choices):
            arrow = "‚îî‚îÄ>" if i == len(scene.choices) - 1 else "‚îú‚îÄ>"
            print(f"   {arrow} {choice.text} ‚Üí {choice.next_scene}")


async def demo_story2game_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Story2Game"""
    
    print("\n\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Story2Game")
    print("=" * 50)
    
    generator = IntegratedQuestGenerator()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π —Å —è–≤–Ω—ã–º–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    scenario = ScenarioInput(
        genre="—Ñ—ç–Ω—Ç–µ–∑–∏",
        hero="–º–æ–ª–æ–¥–æ–π –º–∞–≥",
        goal="–Ω–∞–π—Ç–∏ —Ç—Ä–∏ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–π –ø–æ—Ä—Ç–∞–ª",
        language="ru"
    )
    
    print(f"\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:")
    print(f"   –¶–µ–ª—å: {scenario.goal}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ª–æ–≥–∏–∫—É
    result = await generator.generate_enhanced_quest(
        scenario,
        with_logic=True,
        with_visuals=False,
        export_code=True
    )
    
    logic = result['enhancements']['logic']
    
    print("\nüîß –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è
    print("\n   –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π:")
    for action_id, preconditions in list(logic['preconditions'].items())[:3]:
        if preconditions:
            print(f"   ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ '{action_id}':")
            for precond in preconditions:
                print(f"     - {precond['type']}: {precond.get('item', precond.get('condition'))}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    print("\n   –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:")
    for action_id, effects in list(logic['effects'].items())[:3]:
        if effects:
            print(f"   ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ '{action_id}':")
            for effect in effects:
                print(f"     - {effect['type']}: {effect.get('object', '')} ‚Üí {effect.get('new_state', '')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
    print("\n   –ì—Ä–∞—Ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:")
    for scene_id, actions in list(logic['action_graph'].items())[:3]:
        print(f"   ‚Ä¢ –°—Ü–µ–Ω–∞ '{scene_id}':")
        for action in actions:
            status = "‚úÖ" if action['available'] else "‚ùå"
            print(f"     {status} {action['action_id']} ‚Üí {action['next_scene']}")


async def demo_scenecraft_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π SceneCraft"""
    
    print("\n\nüé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π SceneCraft")
    print("=" * 50)
    
    generator = IntegratedQuestGenerator()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π —Å –±–æ–≥–∞—Ç—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    scenario = ScenarioInput(
        genre="—Ö–æ—Ä—Ä–æ—Ä",
        hero="–¥–µ—Ç–µ–∫—Ç–∏–≤-–æ–∫–∫—É–ª—å—Ç–∏—Å—Ç",
        goal="–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –æ—Å–æ–±–Ω—è–∫ –∏ –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–∫–ª—è—Ç–∏—è",
        language="ru"
    )
    
    print(f"\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print(f"   –ñ–∞–Ω—Ä: {scenario.genre}")
    print(f"   –õ–æ–∫–∞—Ü–∏—è: –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –æ—Å–æ–±–Ω—è–∫")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    result = await generator.generate_enhanced_quest(
        scenario,
        with_logic=False,
        with_visuals=True,
        export_code=False
    )
    
    viz = result['enhancements']['visualization']
    
    print("\nüèóÔ∏è –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–∫–µ—Ç–æ–≤:")
    
    for scene_data in viz['scenes'][:3]:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫–µ—Ç
        with open(scene_data['layout_path'], 'r', encoding='utf-8') as f:
            layout = json.load(f)
        
        print(f"\n   –°—Ü–µ–Ω–∞ '{scene_data['scene_id']}':")
        print(f"   - –°—Ç–∏–ª—å: {layout['style']}")
        print(f"   - –û—Å–≤–µ—â–µ–Ω–∏–µ: {layout['lighting']}")
        
        for room in layout['rooms']:
            print(f"   - –ö–æ–º–Ω–∞—Ç–∞ '{room['room_type']}':")
            print(f"     –†–∞–∑–º–µ—Ä—ã: {room['dimensions']}")
            print(f"     –û–±—ä–µ–∫—Ç–æ–≤: {len(room['objects'])}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤
            for obj in room['objects'][:3]:
                print(f"     ‚Ä¢ {obj['label']} ({obj['semantic_class']})")
    
    print(f"\nüñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    for scene_data in viz['scenes'][:2]:
        print(f"   - {scene_data['scene_id']}: {len(scene_data['image_paths'])} —Ä–∞–∫—É—Ä—Å–æ–≤")
        print(f"     –ö–æ–º–ø–æ–∑–∏—Ç: {scene_data['composite_path']}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò STORY2GAME –ò SCENECRAFT")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        await demo_integrated_generation()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await demo_story2game_features()
        await demo_scenecraft_features()
        
        print("\n\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'output/integrated_demo' –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())