"""
–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI Game Story Generator
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import streamlit as st
import asyncio
from pathlib import Path
import json
import time
from datetime import datetime
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from streamlit_option_menu import option_menu
import base64
from PIL import Image
import io
import os
from dotenv import load_dotenv


__import__("pysqlite3")
import sys
sys.modules["sqlite3"] = sys.modules.pop("pysqlite3")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

from src.quest_generator import QuestGenerator
from src.modules.integrated_quest_generator import IntegratedQuestGenerator
from src.core.models import ScenarioInput, GenerationConfig, Genre
from src.modules.knowledge_base import KnowledgeBase


def get_github_raw_url(file_path: str, use_github: bool = True) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞ –≤ GitHub raw URL.
    
    Args:
        file_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        use_github: –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GitHub URLs (True –¥–ª—è Streamlit Cloud)
    
    Returns:
        GitHub raw URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    """
    if not use_github:
        return file_path
    
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        GITHUB_OWNER = "Sergey-1221"
        GITHUB_REPO = "game-story-ai"
        GITHUB_BRANCH = "streamlit-cloud"
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å - –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ
        normalized_path = str(file_path).replace('\\', '/')
        
        # –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å saved_quests), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        if normalized_path.startswith('saved_quests/'):
            rel_path_str = normalized_path
        else:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            path = Path(normalized_path)
            if path.is_absolute():
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
                try:
                    rel_path = path.relative_to(Path.cwd())
                    rel_path_str = str(rel_path).replace('\\', '/')
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ saved_quests –≤ –ø—É—Ç–∏
                    path_str = str(path).replace('\\', '/')
                    if 'saved_quests' in path_str:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø—É—Ç–∏ –Ω–∞—á–∏–Ω–∞—è —Å saved_quests
                        rel_path_str = path_str[path_str.find('saved_quests'):]
                    else:
                        rel_path_str = path_str
            else:
                rel_path_str = normalized_path
        github_url = f"https://raw.githubusercontent.com/{GITHUB_OWNER}/{GITHUB_REPO}/{GITHUB_BRANCH}/{rel_path_str}"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if st.session_state.get('debug_mode', False):
            st.sidebar.write(f"Original path: {file_path}")
            st.sidebar.write(f"GitHub URL: {github_url}")
        
        return github_url
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        if st.session_state.get('debug_mode', False):
            st.sidebar.error(f"Error creating GitHub URL: {e}")
        return file_path


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Streamlit Cloud
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Streamlit Cloud
is_streamlit_cloud = (
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    any(env in os.environ for env in ['STREAMLIT_SHARING_MODE', 'STREAMLIT_SERVER_ADDRESS']) or
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ—Ç localhost –≤ URL)
    os.environ.get('STREAMLIT_SERVER_HEADLESS', '').lower() == 'true' or
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .streamlit/config.toml (–æ–±—ã—á–Ω–æ –µ—Å—Ç—å –≤ Streamlit Cloud)
    Path('.streamlit/config.toml').exists() or
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –¥–ª—è Streamlit Cloud —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ.get('FORCE_GITHUB_URLS', 'false').lower() == 'true'
)

if is_streamlit_cloud:
    os.environ['STREAMLIT_CLOUD'] = 'true'
else:
    os.environ['STREAMLIT_CLOUD'] = 'false'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Game Story Generator",
    page_icon="üéÆ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .stButton>button {
        background-color: #667eea;
        color: white;
        border-radius: 20px;
        padding: 0.5rem 2rem;
        font-weight: bold;
        border: none;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #764ba2;
        transform: translateY(-2px);
    }
    .scene-card {
        background: #f0f2f6;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
</style>
""", unsafe_allow_html=True)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
def load_persistent_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    persistent_file = Path("saved_quests") / "session_data.json"
    if persistent_file.exists():
        try:
            with open(persistent_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    return {"quest_history": [], "current_quest": None}

def save_persistent_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    try:
        save_dir = Path("saved_quests")
        save_dir.mkdir(exist_ok=True)
        
        persistent_file = save_dir / "session_data.json"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        data_to_save = {
            "quest_history": [],
            "current_quest": None
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–æ–≤
        for h in st.session_state.quest_history:
            history_item = {
                'timestamp': h['timestamp'].isoformat() if hasattr(h['timestamp'], 'isoformat') else str(h['timestamp']),
                'quest': h['quest'].model_dump() if hasattr(h['quest'], 'model_dump') else h['quest'].__dict__,
                'type': h['type']
            }
            if 'enhancements' in h:
                history_item['enhancements'] = h['enhancements']
            data_to_save["quest_history"].append(history_item)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç
        if st.session_state.current_quest:
            data_to_save["current_quest"] = (
                st.session_state.current_quest.model_dump() 
                if hasattr(st.session_state.current_quest, 'model_dump') 
                else st.session_state.current_quest.__dict__
            )
        
        with open(persistent_file, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2, default=str)
            
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
if 'quest_history' not in st.session_state:
    persistent_data = load_persistent_data()
    st.session_state.quest_history = persistent_data.get("quest_history", [])
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –æ–±—ä–µ–∫—Ç—ã –∫–≤–µ—Å—Ç–æ–≤
    for h in st.session_state.quest_history:
        if isinstance(h.get('timestamp'), str):
            try:
                h['timestamp'] = datetime.fromisoformat(h['timestamp'])
            except:
                h['timestamp'] = datetime.now()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–≤–µ—Å—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if isinstance(h.get('quest'), dict):
            try:
                from src.core.models import Quest
                h['quest'] = Quest(**h['quest'])
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                h['quest'] = type('Quest', (), {
                    'title': h['quest'].get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç'),
                    'genre': h['quest'].get('genre', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'hero': h['quest'].get('hero', ''),
                    'goal': h['quest'].get('goal', ''),
                    'scenes': h['quest'].get('scenes', []),
                    'paths': h['quest'].get('paths', []),
                    'metadata': h['quest'].get('metadata', {}),
                    'model_dump': lambda: h['quest']
                })()

if 'current_quest' not in st.session_state:
    persistent_data = load_persistent_data()
    current_quest_data = persistent_data.get("current_quest")
    if current_quest_data:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–≤–µ—Å—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        try:
            from src.core.models import Quest
            st.session_state.current_quest = Quest(**current_quest_data)
        except:
            st.session_state.current_quest = None
    else:
        st.session_state.current_quest = None

if 'generator' not in st.session_state:
    st.session_state.generator = None
if 'integrated_generator' not in st.session_state:
    st.session_state.integrated_generator = None


def init_generators():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    if st.session_state.generator is None:
        with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã..."):
            try:
                st.session_state.generator = QuestGenerator()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QuestGenerator: {e}")
                st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                import traceback
                st.code(traceback.format_exc())
                st.stop()
    
    if st.session_state.integrated_generator is None:
        with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞..."):
            try:
                st.session_state.integrated_generator = IntegratedQuestGenerator()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IntegratedQuestGenerator: {e}")
                st.warning("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                import traceback
                st.code(traceback.format_exc())


def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="main-header">
        <h1>üéÆ AI Game Story Generator</h1>
        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        # st.image("https://via.placeholder.com/300x100/667eea/ffffff?text=AI+Story+Generator", use_container_width=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        hide_generation = os.getenv("HIDE_GENERATION_UI", "false").lower() == "true"
        
        if hide_generation:
            # –ú–µ–Ω—é –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            menu_items = ["üè† –ì–ª–∞–≤–Ω–∞—è", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üé¨ –°—Ü–µ–Ω—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìö –°–ø—Ä–∞–≤–∫–∞"]
            menu_icons = ['house', 'graph-up', 'film', 'gear', 'book']
        else:
            # –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é
            menu_items = ["üè† –ì–ª–∞–≤–Ω–∞—è", "‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üé¨ –°—Ü–µ–Ω—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìö –°–ø—Ä–∞–≤–∫–∞"]
            menu_icons = ['house', 'magic', 'graph-up', 'film', 'gear', 'book']
        
        selected = option_menu(
            "–ú–µ–Ω—é",
            menu_items,
            icons=menu_icons,
            menu_icon="cast",
            default_index=0,
            styles={
                "container": {"padding": "0!important", "background-color": "#fafafa"},
                "icon": {"color": "#667eea", "font-size": "20px"},
                "nav-link": {"font-size": "16px", "text-align": "left", "margin": "0px", "--hover-color": "#eee"},
                "nav-link-selected": {"background-color": "#667eea"},
            }
        )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–∫—Ä—ã—Ç
    if not hide_generation:
        init_generators()
    
    # –†–æ—É—Ç–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü
    if selected == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif selected == "‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä" and not hide_generation:
        show_generator_page()
    elif selected == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        show_analytics_page()
    elif selected == "üé¨ –°—Ü–µ–Ω—ã":
        show_history_page()
    elif selected == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()
    elif selected == "üìö –°–ø—Ä–∞–≤–∫–∞":
        show_help_page()


def show_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        st.write("""
        **AI Game Story Generator** - —ç—Ç–æ –º–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 
        –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –∏ —Å—é–∂–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò, –º—ã —Å–æ–∑–¥–∞–µ–º 
        —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –≤–µ—Ç–≤—è—â–∏–º—Å—è —Å—é–∂–µ—Ç–æ–º, –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π.
        """)
        
        st.subheader("üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        features = {
            "üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è": "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω –∏ –¥–∏–∞–ª–æ–≥–æ–≤",
            "üîÄ –ù–µ–ª–∏–Ω–µ–π–Ω—ã–µ —Å—é–∂–µ—Ç—ã": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–∏–ª–æ–∫ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π",
            "üß† Story2Game –ª–æ–≥–∏–∫–∞": "–ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
            "üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω",
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞": "–ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        }
        
        for feature, description in features.items():
            st.markdown(f"**{feature}**: {description}")
        
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        metrics = st.columns(4)
        with metrics[0]:
            st.metric("–ö–≤–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ", len(st.session_state.quest_history))
        with metrics[1]:
            st.metric("–ñ–∞–Ω—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ", len(["–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ö–æ—Ä—Ä–æ—Ä", "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å", "—Å—Ç–∏–º–ø–∞–Ω–∫"]))
        with metrics[2]:
            modules_count = 0
            if st.session_state.generator:
                modules_count += 5  # –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏
            if st.session_state.integrated_generator:
                modules_count += 3  # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            st.metric("–ú–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ", modules_count)
        with metrics[3]:
            success_rate = 0
            if st.session_state.quest_history:
                success_rate = len([h for h in st.session_state.quest_history if h['quest']]) / len(st.session_state.quest_history) * 100
            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", f"{success_rate:.0f}%" if st.session_state.quest_history else "N/A")
    
    with col2:
        st.subheader("üéØ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        
        quick_genre = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä",
            ["–ö–∏–±–µ—Ä–ø–∞–Ω–∫", "–§—ç–Ω—Ç–µ–∑–∏", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–•–æ—Ä—Ä–æ—Ä", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"]
        )
        
        quick_hero = st.text_input("–ì–µ—Ä–æ–π", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ö–∞–∫–µ—Ä-–æ–¥–∏–Ω–æ—á–∫–∞")
        quick_goal = st.text_area("–¶–µ–ª—å", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–∑–ª–æ–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ —É–∫—Ä–∞—Å—Ç—å –¥–∞–Ω–Ω—ã–µ", height=100)
        
        if st.button("üöÄ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", use_container_width=True):
            if quick_hero and quick_goal:
                st.session_state.quick_scenario = {
                    "genre": quick_genre.lower(),
                    "hero": quick_hero,
                    "goal": quick_goal
                }
                st.success("–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞.")
                st.info("üí° –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—Ç —Ñ–æ—Ä–º—É –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ")
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")


def show_generator_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    st.header("‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–æ–≤")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    tab1, tab2, tab3 = st.tabs(["üéØ –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"])
    
    with tab1:
        show_basic_generator()
    
    with tab2:
        show_advanced_generator()
    
    with tab3:
        show_file_generator()


def show_basic_generator():
    """–ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        quick_scenario = st.session_state.get('quick_scenario', {})
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if quick_scenario:
            st.info("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", help="–û—á–∏—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
                st.session_state.quick_scenario = {}
                st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        default_genre_idx = 0
        if quick_scenario.get('genre'):
            genres = ["–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ö–æ—Ä—Ä–æ—Ä", "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å", "—Å—Ç–∏–º–ø–∞–Ω–∫"]
            try:
                default_genre_idx = genres.index(quick_scenario['genre'].lower())
            except ValueError:
                default_genre_idx = 0
        
        genre = st.selectbox(
            "–ñ–∞–Ω—Ä",
            ["–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ö–æ—Ä—Ä–æ—Ä", "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å", "—Å—Ç–∏–º–ø–∞–Ω–∫"],
            index=default_genre_idx,
            help="–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –≤–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞"
        )
        
        hero = st.text_input(
            "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π",
            value=quick_scenario.get('hero', ''),
            placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç–∞",
            help="–ù–∞–ø—Ä–∏–º–µ—Ä: –º–æ–ª–æ–¥–æ–π –º–∞–≥-—É—á–µ–Ω–∏–∫, –æ–ø—ã—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤, —Ö–∞–∫–µ—Ä-–æ–¥–∏–Ω–æ—á–∫–∞"
        )
        
        goal = st.text_area(
            "–¶–µ–ª—å –∫–≤–µ—Å—Ç–∞",
            value=quick_scenario.get('goal', ''),
            placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –≥–µ—Ä–æ—è",
            height=150,
            help="–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –±—É–¥–µ—Ç –∫–≤–µ—Å—Ç"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        with st.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            language = st.selectbox("–Ø–∑—ã–∫", ["ru", "en"])
            min_scenes = st.slider("–ú–∏–Ω–∏–º—É–º —Å—Ü–µ–Ω", 5, 8, 5)
            max_scenes = st.slider("–ú–∞–∫—Å–∏–º—É–º —Å—Ü–µ–Ω", 7, 10, 10)
            temperature = st.slider("–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (temperature)", 0.0, 1.0, 0.8, 0.1)
    
    with col2:
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        
        if hero and goal:
            st.info(f"""
            **–ñ–∞–Ω—Ä**: {genre}
            **–ì–µ—Ä–æ–π**: {hero}
            **–¶–µ–ª—å**: {goal}
            """)
            
            # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if st.button("üéÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç", use_container_width=True, type="primary"):
                generate_basic_quest(genre, hero, goal, language, temperature)
        else:
            st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏


def show_advanced_generator():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å Story2Game –∏ SceneCraft"""
    st.subheader("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        genre = st.selectbox("–ñ–∞–Ω—Ä", ["–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ö–æ—Ä—Ä–æ—Ä"])
        hero = st.text_input("–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π")
        goal = st.text_area("–¶–µ–ª—å –∫–≤–µ—Å—Ç–∞", height=100)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
        st.subheader("–ú–æ–¥—É–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        with_logic = st.checkbox("üß† Story2Game –ª–æ–≥–∏–∫–∞", value=True, 
                                help="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π")
        with_visuals = st.checkbox("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", value=True,
                                  help="–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω")
        export_code = st.checkbox("üíª –≠–∫—Å–ø–æ—Ä—Ç –≤ –∫–æ–¥", value=False,
                                 help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π Python/JS –∫–æ–¥")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if with_visuals:
            with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"):
                visual_style = st.selectbox("–°—Ç–∏–ª—å", ["realistic", "stylized", "pixel_art"])
                lighting = st.selectbox("–û—Å–≤–µ—â–µ–Ω–∏–µ", ["natural", "dramatic", "mysterious"])
                camera_angles = st.multiselect("–†–∞–∫—É—Ä—Å—ã", ["front", "top", "isometric", "cinematic"],
                                             default=["front", "isometric"])
    
    with col2:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–∫–∏
        if with_logic:
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–∫–∏")
            
            enable_dynamic = st.checkbox("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", 
                                       help="–†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞")
            
            track_inventory = st.checkbox("–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", value=True)
            track_states = st.checkbox("–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤", value=True)
            
            complexity = st.select_slider(
                "–°–ª–æ–∂–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏",
                options=["–ø—Ä–æ—Å—Ç–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "—Å–ª–æ–∂–Ω–∞—è"],
                value="—Å—Ä–µ–¥–Ω—è—è"
            )
    
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", use_container_width=True, type="primary"):
        if hero and goal:
            generate_advanced_quest(
                genre, hero, goal,
                with_logic, with_visuals, export_code,
                visual_style if with_visuals else None,
                enable_dynamic if with_logic else False
            )
        else:
            st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")


def show_file_generator():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ —Ñ–∞–π–ª–∞"""
    st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ —Ñ–∞–π–ª–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º",
        type=['txt'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: –ñ–∞–Ω—Ä, –ì–µ—Ä–æ–π, –¶–µ–ª—å"
    )
    
    if uploaded_file:
        content = uploaded_file.read().decode('utf-8')
        st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞", content, height=200, disabled=True)
        
        if st.button("üéÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", use_container_width=True):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_path = Path("temp") / uploaded_file.name
                temp_path.parent.mkdir(exist_ok=True)
                temp_path.write_text(content, encoding='utf-8')
                
                try:
                    quest = st.session_state.generator.generate(str(temp_path))
                    st.session_state.current_quest = quest
                    st.success("–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    temp_path.unlink()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


def generate_basic_quest(genre, hero, goal, language, temperature):
    """–ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞"""
    with st.spinner("üéÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥"):
        try:
            scenario = ScenarioInput(
                genre=genre,
                hero=hero,
                goal=goal,
                language=language
            )
            
            config = GenerationConfig(
                temperature=temperature,
                use_rag=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            status_text.text("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–∞...")
            progress_bar.progress(0.1)
            
            # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            quest = st.session_state.generator.generate(scenario.model_dump())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.session_state.current_quest = quest
            st.session_state.quest_history.append({
                'timestamp': datetime.now(),
                'quest': quest,
                'type': 'basic'
            })
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            save_persistent_data()
            
            progress_bar.empty()
            status_text.empty()
            st.success("‚úÖ –ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


def generate_advanced_quest(genre, hero, goal, with_logic, with_visuals, 
                          export_code, visual_style, enable_dynamic):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ integrated_generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if st.session_state.integrated_generator is None:
        st.error("‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        return
    
    with st.spinner("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."):
        try:
            scenario = ScenarioInput(
                genre=genre,
                hero=hero,
                goal=goal,
                language="ru"
            )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å —ç—Ç–∞–ø–∞–º–∏
            progress_container = st.container()
            with progress_container:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                stages = [
                    (0.2, "üìù –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞..."),
                    (0.4, "üß† –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ Story2Game...") if with_logic else None,
                    (0.6, "üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ SceneCraft...") if with_visuals else None,
                    (0.8, "üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–æ–¥–∞...") if export_code else None,
                    (1.0, "‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è...")
                ]
                stages = [s for s in stages if s is not None]
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
                status_text.text("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
                progress_bar.progress(0.1)
            
            # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º thread pool –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            import concurrent.futures
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω –ø–∞–ø–æ–∫ –≤ Windows
            import re
            quest_title = getattr(scenario, 'goal', 'quest')
            quest_title = re.sub(r'[<>:"/\\|?*]', '_', quest_title)
            quest_title = quest_title.replace(' ', '_')[:30]
            unique_output_dir = f"saved_quests/{quest_title}_{timestamp}"
            
            # Streamlit –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π event loop, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º thread pool
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    asyncio.run,
                    st.session_state.integrated_generator.generate_enhanced_quest(
                        scenario,
                        with_logic=with_logic,
                        with_visuals=with_visuals,
                        export_code=export_code,
                        output_dir=unique_output_dir
                    )
                )
                result = future.result(timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.session_state.current_quest = result['quest']
            st.session_state.current_enhanced_result = result
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
            timestamp = datetime.now()
            quest_title = getattr(result['quest'], 'title', 'quest')
            # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω –ø–∞–ø–æ–∫ –≤ Windows
            quest_title = re.sub(r'[<>:"/\\|?*]', '_', quest_title)
            quest_title = quest_title.replace(' ', '_')[:30]
            unique_folder = f"{quest_title}_{timestamp.strftime('%Y%m%d_%H%M%S')}"
            save_dir = Path("saved_quests") / unique_folder
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
            if hasattr(st.session_state, 'integrated_generator'):
                saved_path = st.session_state.integrated_generator.save_enhanced_quest(
                    result, str(save_dir)
                )
                result['saved_path'] = str(saved_path)
            
            st.session_state.quest_history.append({
                'timestamp': timestamp,
                'quest': result['quest'],
                'type': 'advanced',
                'enhancements': result['enhancements'],
                'saved_path': str(save_dir)
            })
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            save_persistent_data()
            
            progress_container.empty()
            st.success("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.info("üìö –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ò—Å—Ç–æ—Ä–∏—è' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            st.code(traceback.format_exc())


def show_quest_result():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    quest = st.session_state.current_quest
    
    if not quest:
        st.warning("–ö–≤–µ—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        return
    
    st.markdown("---")
    title = getattr(quest, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç')
    st.subheader(f"üìñ {title}")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    meta_cols = st.columns(4)
    with meta_cols[0]:
        genre = getattr(quest, 'genre', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        st.metric("–ñ–∞–Ω—Ä", genre)
    with meta_cols[1]:
        scenes = getattr(quest, 'scenes', [])
        st.metric("–°—Ü–µ–Ω", len(scenes) if scenes else 0)
    with meta_cols[2]:
        paths = getattr(quest, 'paths', [])
        st.metric("–ü—É—Ç–µ–π", len(paths) if paths else "N/A")
    with meta_cols[3]:
        metadata = getattr(quest, 'metadata', {})
        gen_time = metadata.get('generation_time', 0) if metadata else 0
        st.metric("–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", f"{gen_time:.1f}—Å")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    view_tabs = st.tabs(["üìù –°—Ü–µ–Ω—ã", "üó∫Ô∏è –ì—Ä–∞—Ñ –∫–≤–µ—Å—Ç–∞", "üíæ JSON", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    with view_tabs[0]:
        show_scenes_view(quest)
    
    with view_tabs[1]:
        show_quest_graph(quest)
    
    with view_tabs[2]:
        show_json_view(quest)
    
    with view_tabs[3]:
        show_quest_statistics(quest)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    import time
    quest_title = getattr(quest, 'title', 'unknown').replace(' ', '_').replace(':', '').replace('.', '')[:20]
    button_base_key = f"{quest_title}_{id(quest)}_{int(time.time() * 1000000) % 1000000}"
    
    action_cols = st.columns(4)
    with action_cols[0]:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True, key=f"save_quest_{button_base_key}"):
            save_quest(quest)
    with action_cols[1]:
        if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç", use_container_width=True, key=f"export_quest_{button_base_key}"):
            export_quest(quest)
    with action_cols[2]:
        if st.button("üéÆ –ò–≥—Ä–∞—Ç—å", use_container_width=True, key=f"play_quest_{button_base_key}"):
            st.info("–†–µ–∂–∏–º –∏–≥—Ä—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    with action_cols[3]:
        if st.button("üîÑ –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç", use_container_width=True, key=f"new_quest_{button_base_key}"):
            st.session_state.current_quest = None
            st.rerun()


def show_scenes_view(quest):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω –∫–≤–µ—Å—Ç–∞"""
    scenes = getattr(quest, 'scenes', [])
    
    if not scenes:
        st.warning("–°—Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–≤–µ—Å—Ç–µ")
        return
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    view_mode = st.radio(
        "–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        ["üìã –í—Å–µ —Å—Ü–µ–Ω—ã", "üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç"],
        horizontal=True
    )
    
    if view_mode == "üìã –í—Å–µ —Å—Ü–µ–Ω—ã":
        # –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω
        for i, scene in enumerate(scenes):
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å—Ü–µ–Ω—ã
            scene_id = getattr(scene, 'scene_id', f'scene_{i+1}')
            scene_text = getattr(scene, 'text', '–¢–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            scene_mood = getattr(scene, 'mood', None)
            scene_location = getattr(scene, 'location', None)
            scene_choices = getattr(scene, 'choices', [])
            scene_image = getattr(scene, 'image_prompt', None)
            
            with st.expander(f"–°—Ü–µ–Ω–∞ {i+1}: {scene_id}", expanded=(i==0)):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
                if hasattr(st.session_state, 'current_enhanced_result') and st.session_state.current_enhanced_result and 'visualization' in st.session_state.current_enhanced_result.get('enhancements', {}):
                    viz_data = st.session_state.current_enhanced_result['enhancements']['visualization']
                    # –ò—â–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
                    for scene_viz in viz_data.get('scenes', []):
                        if scene_viz['scene_id'] == scene_id:
                            if 'image_paths' in scene_viz and len(scene_viz['image_paths']) > 0:
                                try:
                                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (view_0.png)
                                    view_0_path = scene_viz['image_paths'][0]
                                    
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –≤ Streamlit Cloud –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                                    is_cloud = os.environ.get('STREAMLIT_CLOUD', 'false').lower() == 'true'
                                    
                                    if is_cloud:
                                        # –í –æ–±–ª–∞–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º GitHub URL
                                        image_url = get_github_raw_url(view_0_path, use_github=True)
                                        st.image(image_url, use_container_width=True)
                                    else:
                                        # –õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                                        path_obj = Path(view_0_path)
                                        if path_obj.exists():
                                            image = Image.open(path_obj)
                                            st.image(image, use_container_width=True)
                                        else:
                                            st.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {view_0_path}")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                            break
                # –î–ª—è –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                elif hasattr(scene, 'image_prompt') and scene.image_prompt:
                    st.info("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                
                st.markdown(f"**–¢–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã:**")
                st.write(scene_text)
                
                col1, col2 = st.columns(2)
                with col1:
                    if scene_mood:
                        st.info(f"üí≠ **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:** {scene_mood}")
                with col2:
                    if scene_location:
                        st.info(f"üìç **–õ–æ–∫–∞—Ü–∏—è:** {scene_location}")
                
                if scene_image:
                    with st.expander("üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
                        st.caption(scene_image)
                
                st.markdown("**–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞:**")
                if scene_choices:
                    for j, choice in enumerate(scene_choices):
                        choice_text = getattr(choice, 'text', f'–í—ã–±–æ—Ä {j+1}')
                        next_scene = getattr(choice, 'next_scene', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        st.write(f"{j+1}. {choice_text} ‚Üí *{next_scene}*")
                else:
                    st.info("–ö–æ–Ω–µ—Ü —Å—Ü–µ–Ω—ã")
    
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∫–≤–µ—Å—Ç–∞
        if 'current_scene_index' not in st.session_state:
            st.session_state.current_scene_index = 0
        
        current_index = st.session_state.current_scene_index
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress = (current_index + 1) / len(scenes)
        st.progress(progress, text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {current_index + 1} –∏–∑ {len(scenes)} —Å—Ü–µ–Ω")
        
        if current_index < len(scenes):
            scene = scenes[current_index]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å—Ü–µ–Ω—ã
            scene_id = getattr(scene, 'scene_id', f'scene_{current_index+1}')
            scene_text = getattr(scene, 'text', '–¢–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            scene_mood = getattr(scene, 'mood', None)
            scene_location = getattr(scene, 'location', None)
            scene_choices = getattr(scene, 'choices', [])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
            st.markdown(f"### –°—Ü–µ–Ω–∞ {current_index + 1}: {scene_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
            if hasattr(st.session_state, 'current_enhanced_result') and st.session_state.current_enhanced_result and 'visualization' in st.session_state.current_enhanced_result.get('enhancements', {}):
                viz_data = st.session_state.current_enhanced_result['enhancements']['visualization']
                # –ò—â–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
                for scene_viz in viz_data.get('scenes', []):
                    if scene_viz['scene_id'] == scene_id:
                        if 'image_paths' in scene_viz and len(scene_viz['image_paths']) > 0:
                            try:
                                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (view_0.png)
                                view_0_path = scene_viz['image_paths'][0]
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –≤ Streamlit Cloud –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                                is_cloud = os.environ.get('STREAMLIT_CLOUD', 'false').lower() == 'true'
                                
                                if is_cloud:
                                    # –í –æ–±–ª–∞–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º GitHub URL
                                    image_url = get_github_raw_url(view_0_path, use_github=True)
                                    st.image(image_url, use_container_width=True)
                                else:
                                    # –õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                                    path_obj = Path(view_0_path)
                                    if path_obj.exists():
                                        image = Image.open(path_obj)
                                        st.image(image, use_container_width=True)
                                    else:
                                        st.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {view_0_path}")
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        break
            # –î–ª—è –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            elif hasattr(scene, 'image_prompt') and scene.image_prompt:
                st.info("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
            col1, col2 = st.columns(2)
            with col1:
                if scene_location:
                    st.info(f"üìç **–õ–æ–∫–∞—Ü–∏—è:** {scene_location}")
            with col2:
                if scene_mood:
                    st.info(f"üí≠ **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:** {scene_mood}")
            
            # –¢–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
            st.markdown("---")
            st.write(scene_text)
            st.markdown("---")
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
            if scene_choices:
                st.markdown("**–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?**")
                for j, choice in enumerate(scene_choices):
                    choice_text = getattr(choice, 'text', f'–í—ã–±–æ—Ä {j+1}')
                    next_scene = getattr(choice, 'next_scene', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω—ã
                    next_index = None
                    for idx, s in enumerate(scenes):
                        if getattr(s, 'scene_id', f'scene_{idx+1}') == next_scene:
                            next_index = idx
                            break
                    
                    if st.button(f"‚û§ {choice_text}", key=f"choice_{current_index}_{j}", use_container_width=True):
                        if next_index is not None:
                            st.session_state.current_scene_index = next_index
                            st.rerun()
                        else:
                            st.warning(f"–°—Ü–µ–Ω–∞ '{next_scene}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                st.success("üéØ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", use_container_width=True):
                    st.session_state.current_scene_index = 0
                    st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ü–µ–Ω—ã")
            if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", use_container_width=True):
                st.session_state.current_scene_index = 0
                st.rerun()


def show_quest_graph(quest):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –∫–≤–µ—Å—Ç–∞"""
    import networkx as nx
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
    G = nx.DiGraph()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    for scene in quest.scenes:
        G.add_node(scene.scene_id, 
                  label=f"{scene.scene_id}\n{scene.text[:30]}...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞
    edge_labels = {}
    for scene in quest.scenes:
        for choice in scene.choices:
            if choice.next_scene:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –¥–ª—è next_scene, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if choice.next_scene not in G.nodes():
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–∑–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "end")
                    if choice.next_scene == "end":
                        G.add_node(choice.next_scene, label="–ö–æ–Ω–µ—Ü")
                    else:
                        G.add_node(choice.next_scene, label=choice.next_scene)
                
                G.add_edge(scene.scene_id, choice.next_scene)
                edge_labels[(scene.scene_id, choice.next_scene)] = choice.text[:20] + "..."
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å plotly
    pos = nx.spring_layout(G, k=2, iterations=50)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞
    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        fig.add_trace(go.Scatter(
            x=[x0, x1, None],
            y=[y0, y1, None],
            mode='lines',
            line=dict(width=1, color='gray'),
            showlegend=False
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    node_x = []
    node_y = []
    node_text = []
    
    for node in G.nodes():
        if node in pos:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            x, y = pos[node]
            node_x.append(x)
            node_y.append(y)
            # –ü–æ–ª—É—á–∞–µ–º label –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —É–∑–ª–∞ –∫–∞–∫ fallback
            node_label = G.nodes[node].get('label', node)
            node_text.append(node_label)
    
    fig.add_trace(go.Scatter(
        x=node_x,
        y=node_y,
        mode='markers+text',
        marker=dict(
            size=30,
            color='#667eea',
            line=dict(width=2, color='white')
        ),
        text=node_text,
        textposition='top center',
        showlegend=False
    ))
    
    fig.update_layout(
        showlegend=False,
        hovermode='closest',
        margin=dict(b=0,l=0,r=0,t=0),
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        height=600
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–≤–µ—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    import time
    quest_id = getattr(quest, 'title', 'unknown').replace(' ', '_').replace(':', '').replace('.', '')[:20]
    unique_id = f"{quest_id}_{id(quest)}_{int(time.time() * 1000000) % 1000000}"
    st.plotly_chart(fig, use_container_width=True, key=f"quest_graph_{unique_id}")


def show_json_view(quest):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    quest_dict = quest.model_dump()
    json_str = json.dumps(quest_dict, ensure_ascii=False, indent=2)
    
    # Ensure proper UTF-8 encoding for display
    st.code(json_str, language='json')
    
    # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    import time
    quest_title = getattr(quest, 'title', 'unknown').replace(' ', '_').replace(':', '').replace('.', '')[:20]
    unique_key = f"download_json_{quest_title}_{id(quest)}_{int(time.time() * 1000000) % 1000000}"
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_str,
        file_name=f"quest_{quest.title.replace(' ', '_')}.json",
        mime="application/json",
        key=unique_key
    )


def show_quest_statistics(quest):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–µ—Å—Ç–∞"""
    import time
    quest_title = getattr(quest, 'title', 'unknown').replace(' ', '_').replace(':', '').replace('.', '')[:20]
    base_key = f"{quest_title}_{id(quest)}_{int(time.time() * 1000000) % 1000000}"
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ü–µ–Ω–∞–º
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ö
        choices_data = pd.DataFrame({
            '–°—Ü–µ–Ω–∞': [s.scene_id for s in quest.scenes],
            '–í—ã–±–æ—Ä–æ–≤': [len(s.choices) for s in quest.scenes]
        })
        
        fig = px.bar(choices_data, x='–°—Ü–µ–Ω–∞', y='–í—ã–±–æ—Ä–æ–≤', 
                    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤ –ø–æ —Å—Ü–µ–Ω–∞–º")
        st.plotly_chart(fig, use_container_width=True, key=f"choices_bar_chart_{base_key}")
        
        # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω
        text_lengths = pd.DataFrame({
            '–°—Ü–µ–Ω–∞': [s.scene_id for s in quest.scenes],
            '–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞': [len(s.text) for s in quest.scenes]
        })
        
        fig2 = px.line(text_lengths, x='–°—Ü–µ–Ω–∞', y='–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞',
                      title="–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω", markers=True)
        st.plotly_chart(fig2, use_container_width=True, key=f"text_length_line_chart_{base_key}")
    
    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π
        st.subheader("üõ§Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π")
        
        if quest.paths:
            paths_data = pd.DataFrame({
                '–ü—É—Ç—å': [p.path_id for p in quest.paths],
                '–î–ª–∏–Ω–∞': [p.length for p in quest.paths],
                '–ò—Å—Ö–æ–¥': [p.outcome or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' for p in quest.paths]
            })
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª–∏–Ω –ø—É—Ç–µ–π
            fig3 = px.bar(paths_data, x='–ü—É—Ç—å', y='–î–ª–∏–Ω–∞', color='–ò—Å—Ö–æ–¥',
                         title="–î–ª–∏–Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π")
            st.plotly_chart(fig3, use_container_width=True, key=f"paths_length_bar_chart_{base_key}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ö–æ–¥–æ–≤
            outcome_counts = paths_data['–ò—Å—Ö–æ–¥'].value_counts()
            fig4 = px.pie(values=outcome_counts.values, names=outcome_counts.index,
                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–æ–≤")
            st.plotly_chart(fig4, use_container_width=True, key=f"outcomes_pie_chart_{base_key}")


def show_enhanced_results(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    quest = result.get('quest')
    if quest:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–µ—Å—Ç–µ
        with st.container():
            st.markdown(f"### {getattr(quest, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç')}")
            
            col_info1, col_info2, col_info3, col_info4 = st.columns(4)
            with col_info1:
                st.info(f"üé≠ **–ñ–∞–Ω—Ä:** {getattr(quest, 'genre', '–Ω/–¥')}")
            with col_info2:
                st.info(f"üßë **–ì–µ—Ä–æ–π:** {getattr(quest, 'hero', '–Ω/–¥')}")
            with col_info3:
                st.info(f"üéØ **–¶–µ–ª—å:** {getattr(quest, 'goal', '–Ω/–¥')}")
            with col_info4:
                scenes = getattr(quest, 'scenes', [])
                st.info(f"üé¨ **–°—Ü–µ–Ω:** {len(scenes)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
    enhancements = result.get('enhancements', {})
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
    tabs = ["üìñ –ö–≤–µ—Å—Ç"]
    if 'logic' in enhancements:
        tabs.append("üß† –õ–æ–≥–∏–∫–∞")
    if 'visualization' in enhancements:
        tabs.append("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    if 'generated_code' in enhancements:
        tabs.append("üíª –ö–æ–¥")
    
    tabs_ui = st.tabs(tabs)
    
    # –ë–∞–∑–æ–≤—ã–π –∫–≤–µ—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–µ—Å—Ç –∏–∑ result
    with tabs_ui[0]:
        # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º current_quest –¥–ª—è show_quest_result
        temp_quest = st.session_state.current_quest
        st.session_state.current_quest = result.get('quest', temp_quest)
        show_quest_result()
        st.session_state.current_quest = temp_quest
    
    # –õ–æ–≥–∏–∫–∞
    if 'üß† –õ–æ–≥–∏–∫–∞' in tabs:
        with tabs_ui[tabs.index('üß† –õ–æ–≥–∏–∫–∞')]:
            if 'logic' in enhancements:
                show_logic_view(enhancements['logic'])
            else:
                st.info("–î–∞–Ω–Ω—ã–µ –æ –ª–æ–≥–∏–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    if 'üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è' in tabs:
        with tabs_ui[tabs.index('üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è')]:
            if 'visualization' in enhancements:
                show_visualization_view(enhancements['visualization'])
            else:
                st.info("–î–∞–Ω–Ω—ã–µ –æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ö–æ–¥
    if 'üíª –ö–æ–¥' in tabs:
        with tabs_ui[tabs.index('üíª –ö–æ–¥')]:
            if 'generated_code' in enhancements:
                show_code_view(enhancements['generated_code'])
            else:
                st.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def show_logic_view(logic_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ Story2Game"""
    st.subheader("üß† –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞")
    
    # –ú–∏—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    with st.expander("üåç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞"):
        st.json(logic_data['world_state'])
    
    # –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è")
        for action_id, preconditions in list(logic_data['preconditions'].items())[:5]:
            if preconditions:
                st.write(f"**{action_id}:**")
                for precond in preconditions:
                    st.write(f"- {precond}")
    
    with col2:
        st.subheader("‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã")
        for action_id, effects in list(logic_data['effects'].items())[:5]:
            if effects:
                st.write(f"**{action_id}:**")
                for effect in effects:
                    st.write(f"- {effect}")
    
    # –ì—Ä–∞—Ñ –¥–µ–π—Å—Ç–≤–∏–π
    st.subheader("üîÄ –ì—Ä–∞—Ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π")
    action_graph_df = []
    for scene_id, actions in logic_data['action_graph'].items():
        for action in actions:
            action_graph_df.append({
                '–°—Ü–µ–Ω–∞': scene_id,
                '–î–µ–π—Å—Ç–≤–∏–µ': action['action_id'],
                '–î–æ—Å—Ç—É–ø–Ω–æ': '‚úÖ' if action['available'] else '‚ùå',
                '–°–ª–µ–¥—É—é—â–∞—è —Å—Ü–µ–Ω–∞': action['next_scene']
            })
    
    if action_graph_df:
        df = pd.DataFrame(action_graph_df)
        st.dataframe(df, use_container_width=True)


def show_visualization_view(viz_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ SceneCraft"""
    st.subheader("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω")
    
    st.info(f"–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω: {len(viz_data['scenes'])}")
    st.metric("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª–æ–≤", 
              f"{viz_data['enhanced_features']['visual_consistency_score']:.0%}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω
    for scene_viz in viz_data['scenes']:  # –í—Å–µ —Å—Ü–µ–Ω—ã
        with st.expander(f"–°—Ü–µ–Ω–∞ {scene_viz['scene_id']}", expanded=False):
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: view_0.png –∏–∑ image_paths > composite_path
            image_shown = False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º view_0.png –∏–∑ image_paths (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            if 'image_paths' in scene_viz and len(scene_viz['image_paths']) > 0:
                try:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (view_0.png)
                    view_0_path = scene_viz['image_paths'][0]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –≤ Streamlit Cloud –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    is_cloud = os.environ.get('STREAMLIT_CLOUD', 'false').lower() == 'true'
                    
                    if is_cloud:
                        # –í –æ–±–ª–∞–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º GitHub URL
                        image_url = get_github_raw_url(view_0_path, use_github=True)
                        st.image(image_url, caption="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã", 
                                use_container_width=True)
                        image_shown = True
                    else:
                        # –õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                        path_obj = Path(view_0_path)
                        if path_obj.exists():
                            image = Image.open(path_obj)
                            st.image(image, caption="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã", 
                                    use_container_width=True)
                            image_shown = True
                        else:
                            st.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {view_0_path}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã view_0 –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø—Ä–æ–±—É–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if not image_shown and 'composite_path' in scene_viz:
                try:
                    composite_path = scene_viz['composite_path']
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –≤ Streamlit Cloud –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    is_cloud = os.environ.get('STREAMLIT_CLOUD', 'false').lower() == 'true'
                    
                    if is_cloud:
                        # –í –æ–±–ª–∞–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º GitHub URL
                        image_url = get_github_raw_url(composite_path, use_github=True)
                        st.image(image_url, caption="–ú–Ω–æ–≥–æ—Ä–∞–∫—É—Ä—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", 
                                use_container_width=True)
                        image_shown = True
                    else:
                        # –õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                        path_obj = Path(composite_path)
                        if path_obj.exists():
                            image = Image.open(path_obj)
                            st.image(image, caption="–ú–Ω–æ–≥–æ—Ä–∞–∫—É—Ä—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", 
                                    use_container_width=True)
                            image_shown = True
                        else:
                            st.warning(f"–ö–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {composite_path}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if not image_shown:
                st.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            # –ú–∞–∫–µ—Ç —Å—Ü–µ–Ω—ã –≤–Ω–∏–∑—É –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
            if 'layout_path' in scene_viz:
                with st.expander("üèóÔ∏è –ú–∞–∫–µ—Ç —Å—Ü–µ–Ω—ã", expanded=False):
                    try:
                        with open(scene_viz['layout_path'], 'r', encoding='utf-8') as f:
                            layout = json.load(f)
                        st.json(layout)
                    except:
                        st.info("–ú–∞–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def show_code_view(generated_code):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    st.subheader("üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥")
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    lang = st.selectbox("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", ["Python", "JavaScript"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥
    st.code(generated_code, language=lang.lower())
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    file_ext = "py" if lang == "Python" else "js"
    st.download_button(
        label=f"üì• –°–∫–∞—á–∞—Ç—å {lang} –∫–æ–¥",
        data=generated_code,
        file_name=f"quest_logic.{file_ext}",
        mime="text/plain"
    )


def show_analytics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    if not st.session_state.quest_history:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–≤–µ—Å—Ç–æ–≤!")
        return
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    metrics = st.columns(4)
    with metrics[0]:
        st.metric("–í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤", len(st.session_state.quest_history))
    with metrics[1]:
        total_scenes = 0
        valid_quests = 0
        for h in st.session_state.quest_history:
            scenes = getattr(h['quest'], 'scenes', [])
            if scenes:
                total_scenes += len(scenes)
                valid_quests += 1
        avg_scenes = total_scenes / valid_quests if valid_quests > 0 else 0
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å—Ü–µ–Ω", f"{avg_scenes:.1f}")
    with metrics[2]:
        basic_count = sum(1 for h in st.session_state.quest_history if h['type'] == 'basic')
        st.metric("–ë–∞–∑–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", basic_count)
    with metrics[3]:
        advanced_count = sum(1 for h in st.session_state.quest_history if h['type'] == 'advanced')
        st.metric("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", advanced_count)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∂–∞–Ω—Ä–∞–º
        genres = []
        for h in st.session_state.quest_history:
            genre = getattr(h['quest'], 'genre', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            genres.append(genre)
        genre_counts = pd.Series(genres).value_counts()
        
        fig = px.pie(values=genre_counts.values, names=genre_counts.index,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∂–∞–Ω—Ä–∞–º")
        import time
        analytics_key = f"analytics_genres_pie_{int(time.time() * 1000000) % 1000000}"
        st.plotly_chart(fig, use_container_width=True, key=analytics_key)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        times = [h['timestamp'] for h in st.session_state.quest_history]
        times_df = pd.DataFrame({'timestamp': times, 'count': 1})
        times_df['date'] = times_df['timestamp'].dt.date
        daily_counts = times_df.groupby('date')['count'].sum().reset_index()
        
        fig = px.line(daily_counts, x='date', y='count',
                     title="–ö–≤–µ—Å—Ç—ã –ø–æ –¥–Ω—è–º", markers=True)
        analytics_timeline_key = f"analytics_timeline_{int(time.time() * 1000000) % 1000000}"
        st.plotly_chart(fig, use_container_width=True, key=analytics_timeline_key)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–µ—Å—Ç–æ–≤
    quest_data = []
    for h in st.session_state.quest_history:
        quest = h['quest']
        scenes = getattr(quest, 'scenes', [])
        metadata = getattr(quest, 'metadata', {})
        quest_data.append({
            '–í—Ä–µ–º—è': h['timestamp'].strftime('%Y-%m-%d %H:%M'),
            '–ù–∞–∑–≤–∞–Ω–∏–µ': getattr(quest, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç'),
            '–ñ–∞–Ω—Ä': getattr(quest, 'genre', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            '–°—Ü–µ–Ω': len(scenes) if scenes else 0,
            '–¢–∏–ø': h['type'],
            '–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏': f"{metadata.get('generation_time', 0):.1f}—Å"
        })
    
    df = pd.DataFrame(quest_data)
    st.dataframe(df, use_container_width=True)


def show_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ü–µ–Ω"""
    st.header("üé¨ –°—Ü–µ–Ω—ã –∫–≤–µ—Å—Ç–æ–≤")
    
    if not st.session_state.quest_history:
        st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç!")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.markdown("### üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
    
    with col_stat1:
        st.metric("–í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤", len(st.session_state.quest_history))
    
    with col_stat2:
        basic_count = len([h for h in st.session_state.quest_history if h['type'] == 'basic'])
        st.metric("–ë–∞–∑–æ–≤—ã—Ö", basic_count)
    
    with col_stat3:
        advanced_count = len([h for h in st.session_state.quest_history if h['type'] == 'advanced'])
        st.metric("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö", advanced_count)
    
    with col_stat4:
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∫–≤–µ—Å—Ç–∞
        total_scenes = sum(len(getattr(h['quest'], 'scenes', [])) for h in st.session_state.quest_history)
        avg_scenes = total_scenes / len(st.session_state.quest_history) if st.session_state.quest_history else 0
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞", f"{avg_scenes:.1f} —Å—Ü–µ–Ω")
    
    st.markdown("---")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤
        genres = set()
        for h in st.session_state.quest_history:
            try:
                genre = getattr(h['quest'], 'genre', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                if isinstance(genre, str):
                    genres.add(genre)
            except:
                genres.add('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        filter_genre = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É", 
                                   ["–í—Å–µ"] + list(genres))
    with col2:
        filter_type = st.selectbox("–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", ["–í—Å–µ", "basic", "advanced"])
    with col3:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", ["–ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏", "–°—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏", "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_history = st.session_state.quest_history
    
    if filter_genre != "–í—Å–µ":
        filtered_history = [h for h in filtered_history if getattr(h['quest'], 'genre', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') == filter_genre]
    
    if filter_type != "–í—Å–µ":
        filtered_history = [h for h in filtered_history if h['type'] == filter_type]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "–ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏":
        filtered_history = sorted(filtered_history, key=lambda x: x['timestamp'], reverse=True)
    elif sort_by == "–°—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏":
        filtered_history = sorted(filtered_history, key=lambda x: x['timestamp'])
    else:
        filtered_history = sorted(filtered_history, key=lambda x: getattr(x['quest'], 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç'))
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
    if filtered_history:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if hasattr(st.session_state, 'viewing_quest_index'):
            if st.session_state.viewing_quest_index >= len(filtered_history):
                st.session_state.viewing_quest_index = 0
        
        # –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π
        if not st.session_state.current_quest or not hasattr(st.session_state, 'viewing_quest_index'):
            st.session_state.current_quest = filtered_history[0]['quest']
            st.session_state.viewing_quest_index = 0
            if 'enhancements' in filtered_history[0]:
                st.session_state.current_enhanced_result = {
                    'quest': filtered_history[0]['quest'],
                    'enhancements': filtered_history[0]['enhancements']
                }
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
    if st.session_state.current_quest and hasattr(st.session_state, 'viewing_quest_index'):
        # –î–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –≤–∏–¥
        col_list, col_view = st.columns([1, 2])
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
        with col_list:
            st.markdown("### üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤")
            
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è —Å–ø–∏—Å–∫–∞
            with st.container(height=600):
                for i, history_item in enumerate(filtered_history):
                    quest = history_item['quest']
                    title = getattr(quest, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç')
                    
                    # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–≤–µ—Å—Ç–∞
                    if i == st.session_state.viewing_quest_index:
                        # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç
                        st.success(f"‚ñ∂ **{title}**")
                        st.caption(f"{history_item['timestamp'].strftime('%d.%m')}")
                    else:
                        col_title, col_actions = st.columns([3, 1])
                        with col_title:
                            if st.button(f"{title}", key=f"quick_view_{i}", use_container_width=True):
                                st.session_state.current_quest = quest
                                st.session_state.viewing_quest_index = i
                                if 'enhancements' in history_item:
                                    st.session_state.current_enhanced_result = {
                                        'quest': quest,
                                        'enhancements': history_item['enhancements']
                                    }
                                st.rerun()
                            st.caption(f"{history_item['timestamp'].strftime('%d.%m')}")
                        
                        with col_actions:
                            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            view_only_mode = os.getenv('VIEW_ONLY_MODE', 'false').lower() == 'true'
                            if not view_only_mode:
                                if st.button("üóëÔ∏è", key=f"quick_delete_{i}", help="–£–¥–∞–ª–∏—Ç—å"):
                                    st.session_state.quest_history.remove(history_item)
                                    save_persistent_data()
                                    if st.session_state.viewing_quest_index == i:
                                        st.session_state.current_quest = None
                                        del st.session_state.viewing_quest_index
                                    st.rerun()
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        with col_view:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            col_header1, col_header2, col_header3 = st.columns([8, 1, 1])
            with col_header1:
                st.markdown("### üéÆ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–µ—Å—Ç–∞")
            with col_header2:
                if st.button("üíæ", key="export_view", help="–≠–∫—Å–ø–æ—Ä—Ç"):
                    export_quest(st.session_state.current_quest)
            with col_header3:
                if st.button("‚úñ", key="close_view", help="–ó–∞–∫—Ä—ã—Ç—å"):
                    st.session_state.current_quest = None
                    if hasattr(st.session_state, 'viewing_quest_index'):
                        del st.session_state.viewing_quest_index
                    if hasattr(st.session_state, 'current_enhanced_result'):
                        st.session_state.current_enhanced_result = None
                    st.rerun()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
            is_enhanced = hasattr(st.session_state, 'current_enhanced_result') and st.session_state.current_enhanced_result
            
            if is_enhanced:
                show_enhanced_results(st.session_state.current_enhanced_result)
            else:
                # –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞
                quest = st.session_state.current_quest
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with st.container():
                    st.markdown(f"### {getattr(quest, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç')}")
                    
                    col_info1, col_info2, col_info3, col_info4 = st.columns(4)
                    with col_info1:
                        st.info(f"üé≠ **–ñ–∞–Ω—Ä:** {getattr(quest, 'genre', '–Ω/–¥')}")
                    with col_info2:
                        st.info(f"üßë **–ì–µ—Ä–æ–π:** {getattr(quest, 'hero', '–Ω/–¥')}")
                    with col_info3:
                        st.info(f"üéØ **–¶–µ–ª—å:** {getattr(quest, 'goal', '–Ω/–¥')}")
                    with col_info4:
                        scenes = getattr(quest, 'scenes', [])
                        st.info(f"üé¨ **–°—Ü–µ–Ω:** {len(scenes)}")
                
                # –í–∫–ª–∞–¥–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
                tabs = st.tabs(["üé¨ –°—Ü–µ–Ω—ã", "üó∫Ô∏è –ì—Ä–∞—Ñ", "üìÑ JSON", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
                
                with tabs[0]:
                    show_scenes_view(quest)
                
                with tabs[1]:
                    show_quest_graph(quest)
                
                with tabs[2]:
                    show_json_view(quest)
                
                with tabs[3]:
                    show_quest_statistics(quest)


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π
    st.subheader("üîë –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π")
    
    import os
    openai_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if os.getenv("OPENAI_API_KEY") else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    anthropic_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if os.getenv("ANTHROPIC_API_KEY") else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    
    col1, col2 = st.columns(2)
    with col1:
        st.info(f"**OpenAI API:** {openai_status}")
    with col2:
        st.info(f"**Anthropic API:** {anthropic_status}")
    
    if not os.getenv("OPENAI_API_KEY") and not os.getenv("ANTHROPIC_API_KEY"):
        st.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ `.env` –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
        st.code("""
# –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env:
OPENAI_API_KEY=your_openai_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here
        """)
    
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    st.subheader("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    
    if 'debug_mode' not in st.session_state:
        st.session_state.debug_mode = False
    
    debug_mode = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", value=st.session_state.debug_mode)
    st.session_state.debug_mode = debug_mode
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GitHub URLs
    if 'force_github_urls' not in st.session_state:
        st.session_state.force_github_urls = os.environ.get('FORCE_GITHUB_URLS', 'false').lower() == 'true'
    
    force_github = st.checkbox("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub URLs –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                              value=st.session_state.force_github_urls,
                              help="–í–∫–ª—é—á–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ Streamlit Cloud –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
    
    if force_github != st.session_state.force_github_urls:
        st.session_state.force_github_urls = force_github
        os.environ['FORCE_GITHUB_URLS'] = 'true' if force_github else 'false'
        os.environ['STREAMLIT_CLOUD'] = 'true' if force_github else os.environ.get('STREAMLIT_CLOUD', 'false')
        st.rerun()
    
    if debug_mode:
        st.info("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç—è—Ö –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        is_cloud = os.environ.get('STREAMLIT_CLOUD', 'false').lower() == 'true'
        st.write(f"**–û–∫—Ä—É–∂–µ–Ω–∏–µ:** {'Streamlit Cloud (GitHub URLs –∞–∫—Ç–∏–≤–Ω—ã)' if is_cloud else '–õ–æ–∫–∞–ª—å–Ω–æ–µ (–ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Streamlit Cloud
        cloud_vars = {
            'STREAMLIT_SHARING_MODE': os.environ.get('STREAMLIT_SHARING_MODE', 'Not set'),
            'STREAMLIT_SERVER_ADDRESS': os.environ.get('STREAMLIT_SERVER_ADDRESS', 'Not set'),
            'STREAMLIT_SERVER_HEADLESS': os.environ.get('STREAMLIT_SERVER_HEADLESS', 'Not set'),
            'STREAMLIT_CLOUD': os.environ.get('STREAMLIT_CLOUD', 'Not set'),
            'FORCE_GITHUB_URLS': os.environ.get('FORCE_GITHUB_URLS', 'Not set')
        }
        
        with st.expander("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
            for var, value in cloud_vars.items():
                st.write(f"**{var}:** {value}")
                
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏
        with st.expander("–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π"):
            test_path = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
                                    value="saved_quests\\–ü–æ–∫–∏–Ω—É—Ç—å_–º—Ñ—Ü_20250804_224312\\–ª–µ–≥–µ–Ω–¥–∞_–æ_–ø–æ–∫–∏–Ω—É—Ç—å_–º—Ñ—Ü_20250804_224346\\scene_1\\view_0.png")
            if test_path:
                github_url = get_github_raw_url(test_path, use_github=is_cloud)
                st.code(github_url)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
                local_path = Path(test_path.replace('\\', '/'))
                if local_path.exists():
                    st.success(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ: {local_path}")
                else:
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {local_path}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    current_model = os.getenv("DEFAULT_MODEL", "gpt-4o-mini")
    current_temp = float(os.getenv("DEFAULT_TEMPERATURE", "0.8"))
    current_tokens = int(os.getenv("DEFAULT_MAX_TOKENS", "2000"))
    
    st.info(f"**–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model}")
    st.info(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {current_temp}")
    st.info(f"**–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:** {current_tokens}")
    
    st.markdown("üí° **–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª `.env`:**")
    st.code(f"""
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ .env:
DEFAULT_MODEL={current_model}
DEFAULT_TEMPERATURE={current_temp}
DEFAULT_MAX_TOKENS={current_tokens}
    """)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    log_level = os.getenv("LOG_LEVEL", "INFO")
    api_host = os.getenv("API_HOST", "0.0.0.0")
    api_port = os.getenv("API_PORT", "8000")
    
    st.info(f"**–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:** {log_level}")
    st.info(f"**API —Å–µ—Ä–≤–µ—Ä:** {api_host}:{api_port}")
    
    st.markdown("üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ `.env`:**")
    st.code(f"""
# –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
LOG_LEVEL={log_level}
API_HOST={api_host}
API_PORT={api_port}
CHROMA_PERSIST_DIRECTORY=./data/chroma
    """)
    
    # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
    st.subheader("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"):
        with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π..."):
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è knowledge base
            st.session_state.generator.knowledge_base = KnowledgeBase()
            st.success("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏
    st.subheader("üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", use_container_width=True):
            st.session_state.quest_history = []
            st.session_state.current_quest = None
            save_persistent_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
            st.rerun()
    
    with col2:
        if st.button("üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", use_container_width=True):
            save_persistent_data()
            st.success("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    persistent_file = Path("saved_quests") / "session_data.json"
    if persistent_file.exists():
        file_size = persistent_file.stat().st_size
        st.info(f"üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {file_size} –±–∞–π—Ç")
        st.info(f"üìç –ü—É—Ç—å: {persistent_file.absolute()}")
    else:
        st.info("üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", use_container_width=True):
            # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON
            history_data = []
            for h in st.session_state.quest_history:
                history_data.append({
                    'timestamp': h['timestamp'].isoformat(),
                    'quest': h['quest'].model_dump(),
                    'type': h['type']
                })
            
            json_str = json.dumps(history_data, ensure_ascii=False, indent=2)
            st.download_button(
                "üíæ –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                data=json_str,
                file_name="quest_history.json",
                mime="application/json"
            )
    
    with col2:
        uploaded_history = st.file_uploader("üì• –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", type=['json'])
        if uploaded_history:
            # –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
            st.info("–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


def show_help_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    st.header("üìö –°–ø—Ä–∞–≤–∫–∞")
    
    # –†–∞–∑–¥–µ–ª—ã —Å–ø—Ä–∞–≤–∫–∏
    help_sections = {
        "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç": """
        1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä**
        2. –í—ã–±–µ—Ä–∏—Ç–µ **–∂–∞–Ω—Ä** –≤–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞
        3. –û–ø–∏—à–∏—Ç–µ **–≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è**
        4. –£–∫–∞–∂–∏—Ç–µ **—Ü–µ–ª—å** –∫–≤–µ—Å—Ç–∞
        5. –ù–∞–∂–º–∏—Ç–µ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç**
        6. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (30-60 —Å–µ–∫—É–Ω–¥)
        """,
        
        "üìù –§–æ—Ä–º–∞—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": """
        **–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª** –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
        ```
        –ñ–∞–Ω—Ä: [–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞]
        –ì–µ—Ä–æ–π: [–æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ—Ä–æ—è]
        –¶–µ–ª—å: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏]
        ```
        
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∂–∞–Ω—Ä—ã:**
        - –ö–∏–±–µ—Ä–ø–∞–Ω–∫
        - –§—ç–Ω—Ç–µ–∑–∏
        - –î–µ—Ç–µ–∫—Ç–∏–≤
        - –•–æ—Ä—Ä–æ—Ä
        - –ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞
        - –ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å
        - –°—Ç–∏–º–ø–∞–Ω–∫
        """,
        
        "üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è": """
        **Story2Game –ª–æ–≥–∏–∫–∞** –¥–æ–±–∞–≤–ª—è–µ—Ç:
        - –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        - –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
        - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞
        - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
        
        **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è** —Å–æ–∑–¥–∞–µ—Ç:
        - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω
        - –ö–∞—Ä—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        - –í–∏–∑—É–∞–ª—å–Ω—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        """,
        
        "üíæ –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞": """
        - **JSON** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–≤–µ—Å—Ç–∞
        - **Python/JS** - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥
        - **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω
        """,
        
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã": """
        **Q: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è?**
        A: –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 30-60 —Å–µ–∫—É–Ω–¥, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è - 2-5 –º–∏–Ω—É—Ç
        
        **Q: –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**
        A: –†—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        
        **Q: –ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç?**
        A: –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON –∏ —Ä—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        **Q: –ù—É–∂–µ–Ω –ª–∏ API –∫–ª—é—á?**
        A: –î–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è OpenAI –∏–ª–∏ Anthropic API –∫–ª—é—á
        """
    }
    
    for section, content in help_sections.items():
        with st.expander(section, expanded=(section == "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")):
            st.markdown(content)
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
    st.subheader("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("üìñ [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://github.com/yourusername/game-story-ai)")
    with col2:
        st.markdown("üêõ [–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ](https://github.com/yourusername/game-story-ai/issues)")
    with col3:
        st.markdown("üí¨ [–°–æ–æ–±—â–µ—Å—Ç–≤–æ](https://discord.gg/yourdiscord)")


def save_quest(quest):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_dir = Path("saved_quests")
        save_dir.mkdir(exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
        if not save_dir.exists():
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (—É–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Unicode)
        safe_title = ""
        if hasattr(quest, 'title') and quest.title:
            # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Windows
            import re
            safe_title = re.sub(r'[<>:"/\\|?*]', '', quest.title)  # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Windows
            safe_title = "".join(c for c in safe_title if c.isprintable()).strip()  # –¢–æ–ª—å–∫–æ –ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            safe_title = safe_title.replace(' ', '_')[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        if not safe_title:
            safe_title = "quest"
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{safe_title}_{timestamp}.json"
        filepath = save_dir / filename
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: {filepath}")
        st.info(f"üè∑Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {getattr(quest, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        st.info(f"üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        quest_data = quest.model_dump() if hasattr(quest, 'model_dump') else quest.__dict__
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        with open(filepath, 'w', encoding='utf-8', errors='ignore') as f:
            json.dump(quest_data, f, ensure_ascii=False, indent=2, default=str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if filepath.exists():
            file_size = filepath.stat().st_size
            st.success(f"‚úÖ –ö–≤–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            st.success(f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            st.info(f"üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {filepath.absolute()}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
            try:
                with open(filepath, 'r', encoding='utf-8') as test_f:
                    test_data = json.load(test_f)
                st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω")
            except Exception as read_error:
                st.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —á—Ç–µ–Ω–∏–µ–º: {read_error}")
        else:
            st.error("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        
    except PermissionError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        st.error(f"–î–µ—Ç–∞–ª–∏: {e}")
        st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    except UnicodeEncodeError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        st.info("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {type(e).__name__}: {e}")
        import traceback
        st.code(traceback.format_exc(), language="python")
        st.info("üí° –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã—à–µ")


def export_quest(quest):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–≤–µ—Å—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    with st.expander("üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞", expanded=True):
        format_type = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ["JSON", "Python Code", "JavaScript Code"]
        )
        
        include_metadata = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", value=True)
        include_visuals = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", value=False)
        
        if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
            st.info(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


if __name__ == "__main__":
    main()