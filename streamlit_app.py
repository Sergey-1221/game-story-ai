"""
–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI Game Story Generator
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import streamlit as st
import asyncio
from pathlib import Path
import json
import time
from datetime import datetime
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from streamlit_option_menu import option_menu
import base64
from PIL import Image
import io

from src.quest_generator import QuestGenerator
from src.modules.integrated_quest_generator import IntegratedQuestGenerator
from src.core.models import ScenarioInput, GenerationConfig, Genre
from src.modules.knowledge_base import KnowledgeBase


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Game Story Generator",
    page_icon="üéÆ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .stButton>button {
        background-color: #667eea;
        color: white;
        border-radius: 20px;
        padding: 0.5rem 2rem;
        font-weight: bold;
        border: none;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #764ba2;
        transform: translateY(-2px);
    }
    .scene-card {
        background: #f0f2f6;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
</style>
""", unsafe_allow_html=True)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'quest_history' not in st.session_state:
    st.session_state.quest_history = []
if 'current_quest' not in st.session_state:
    st.session_state.current_quest = None
if 'generator' not in st.session_state:
    st.session_state.generator = None
if 'integrated_generator' not in st.session_state:
    st.session_state.integrated_generator = None


def init_generators():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    if st.session_state.generator is None:
        with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã..."):
            st.session_state.generator = QuestGenerator()
            st.session_state.integrated_generator = IntegratedQuestGenerator()


def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="main-header">
        <h1>üéÆ AI Game Story Generator</h1>
        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        st.image("https://via.placeholder.com/300x100/667eea/ffffff?text=AI+Story+Generator", use_column_width=True)
        
        selected = option_menu(
            "–ú–µ–Ω—é",
            ["üè† –ì–ª–∞–≤–Ω–∞—è", "‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìö –°–ø—Ä–∞–≤–∫–∞"],
            icons=['house', 'magic', 'graph-up', 'clock-history', 'gear', 'book'],
            menu_icon="cast",
            default_index=0,
            styles={
                "container": {"padding": "0!important", "background-color": "#fafafa"},
                "icon": {"color": "#667eea", "font-size": "20px"},
                "nav-link": {"font-size": "16px", "text-align": "left", "margin": "0px", "--hover-color": "#eee"},
                "nav-link-selected": {"background-color": "#667eea"},
            }
        )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    init_generators()
    
    # –†–æ—É—Ç–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü
    if selected == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif selected == "‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä":
        show_generator_page()
    elif selected == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        show_analytics_page()
    elif selected == "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è":
        show_history_page()
    elif selected == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()
    elif selected == "üìö –°–ø—Ä–∞–≤–∫–∞":
        show_help_page()


def show_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        st.write("""
        **AI Game Story Generator** - —ç—Ç–æ –º–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 
        –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –∏ —Å—é–∂–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò, –º—ã —Å–æ–∑–¥–∞–µ–º 
        —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –≤–µ—Ç–≤—è—â–∏–º—Å—è —Å—é–∂–µ—Ç–æ–º, –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π.
        """)
        
        st.subheader("üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        features = {
            "üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è": "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω –∏ –¥–∏–∞–ª–æ–≥–æ–≤",
            "üîÄ –ù–µ–ª–∏–Ω–µ–π–Ω—ã–µ —Å—é–∂–µ—Ç—ã": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–∏–ª–æ–∫ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π",
            "üß† Story2Game –ª–æ–≥–∏–∫–∞": "–ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
            "üé® SceneCraft –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è": "3D-–º–∞–∫–µ—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω",
            "üéÆ –≠–∫—Å–ø–æ—Ä—Ç –≤ –¥–≤–∏–∂–∫–∏": "Unity, Unreal Engine, –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥",
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞": "–ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        }
        
        for feature, description in features.items():
            st.markdown(f"**{feature}**: {description}")
        
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        metrics = st.columns(4)
        with metrics[0]:
            st.metric("–ö–≤–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ", len(st.session_state.quest_history))
        with metrics[1]:
            st.metric("–ñ–∞–Ω—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ", 7)
        with metrics[2]:
            st.metric("–ú–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ", 12)
        with metrics[3]:
            st.metric("–ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "95%")
    
    with col2:
        st.subheader("üéØ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        
        quick_genre = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä",
            ["–ö–∏–±–µ—Ä–ø–∞–Ω–∫", "–§—ç–Ω—Ç–µ–∑–∏", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–•–æ—Ä—Ä–æ—Ä", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"]
        )
        
        quick_hero = st.text_input("–ì–µ—Ä–æ–π", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ö–∞–∫–µ—Ä-–æ–¥–∏–Ω–æ—á–∫–∞")
        quick_goal = st.text_area("–¶–µ–ª—å", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–∑–ª–æ–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ —É–∫—Ä–∞—Å—Ç—å –¥–∞–Ω–Ω—ã–µ", height=100)
        
        if st.button("üöÄ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", use_container_width=True):
            if quick_hero and quick_goal:
                st.session_state.quick_scenario = {
                    "genre": quick_genre.lower(),
                    "hero": quick_hero,
                    "goal": quick_goal
                }
                st.switch_page("pages/generator.py")
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")


def show_generator_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    st.header("‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–æ–≤")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    tab1, tab2, tab3 = st.tabs(["üéØ –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"])
    
    with tab1:
        show_basic_generator()
    
    with tab2:
        show_advanced_generator()
    
    with tab3:
        show_file_generator()


def show_basic_generator():
    """–ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        genre = st.selectbox(
            "–ñ–∞–Ω—Ä",
            ["–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ö–æ—Ä—Ä–æ—Ä", "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å", "—Å—Ç–∏–º–ø–∞–Ω–∫"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –≤–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞"
        )
        
        hero = st.text_input(
            "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π",
            placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç–∞",
            help="–ù–∞–ø—Ä–∏–º–µ—Ä: –º–æ–ª–æ–¥–æ–π –º–∞–≥-—É—á–µ–Ω–∏–∫, –æ–ø—ã—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤, —Ö–∞–∫–µ—Ä-–æ–¥–∏–Ω–æ—á–∫–∞"
        )
        
        goal = st.text_area(
            "–¶–µ–ª—å –∫–≤–µ—Å—Ç–∞",
            placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –≥–µ—Ä–æ—è",
            height=150,
            help="–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –±—É–¥–µ—Ç –∫–≤–µ—Å—Ç"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        with st.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            language = st.selectbox("–Ø–∑—ã–∫", ["ru", "en"])
            min_scenes = st.slider("–ú–∏–Ω–∏–º—É–º —Å—Ü–µ–Ω", 5, 8, 5)
            max_scenes = st.slider("–ú–∞–∫—Å–∏–º—É–º —Å—Ü–µ–Ω", 7, 10, 10)
            temperature = st.slider("–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (temperature)", 0.0, 1.0, 0.8, 0.1)
    
    with col2:
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        
        if hero and goal:
            st.info(f"""
            **–ñ–∞–Ω—Ä**: {genre}
            **–ì–µ—Ä–æ–π**: {hero}
            **–¶–µ–ª—å**: {goal}
            """)
            
            # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if st.button("üéÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç", use_container_width=True, type="primary"):
                generate_basic_quest(genre, hero, goal, language, temperature)
        else:
            st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if st.session_state.current_quest:
        show_quest_result()


def show_advanced_generator():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å Story2Game –∏ SceneCraft"""
    st.subheader("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        genre = st.selectbox("–ñ–∞–Ω—Ä", ["–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ö–æ—Ä—Ä–æ—Ä"])
        hero = st.text_input("–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π")
        goal = st.text_area("–¶–µ–ª—å –∫–≤–µ—Å—Ç–∞", height=100)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
        st.subheader("–ú–æ–¥—É–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        with_logic = st.checkbox("üß† Story2Game –ª–æ–≥–∏–∫–∞", value=True, 
                                help="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π")
        with_visuals = st.checkbox("üé® SceneCraft –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", value=True,
                                  help="–°–æ–∑–¥–∞—Ç—å 3D-–º–∞–∫–µ—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω")
        export_code = st.checkbox("üíª –≠–∫—Å–ø–æ—Ä—Ç –≤ –∫–æ–¥", value=False,
                                 help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π Python/JS –∫–æ–¥")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if with_visuals:
            with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"):
                visual_style = st.selectbox("–°—Ç–∏–ª—å", ["realistic", "stylized", "pixel_art"])
                lighting = st.selectbox("–û—Å–≤–µ—â–µ–Ω–∏–µ", ["natural", "dramatic", "mysterious"])
                camera_angles = st.multiselect("–†–∞–∫—É—Ä—Å—ã", ["front", "top", "isometric", "cinematic"],
                                             default=["front", "isometric"])
    
    with col2:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–∫–∏
        if with_logic:
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–∫–∏")
            
            enable_dynamic = st.checkbox("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", 
                                       help="–†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞")
            
            track_inventory = st.checkbox("–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", value=True)
            track_states = st.checkbox("–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤", value=True)
            
            complexity = st.select_slider(
                "–°–ª–æ–∂–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏",
                options=["–ø—Ä–æ—Å—Ç–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "—Å–ª–æ–∂–Ω–∞—è"],
                value="—Å—Ä–µ–¥–Ω—è—è"
            )
    
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", use_container_width=True, type="primary"):
        if hero and goal:
            generate_advanced_quest(
                genre, hero, goal,
                with_logic, with_visuals, export_code,
                visual_style if with_visuals else None,
                enable_dynamic if with_logic else False
            )
        else:
            st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")


def show_file_generator():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ —Ñ–∞–π–ª–∞"""
    st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ —Ñ–∞–π–ª–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º",
        type=['txt'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: –ñ–∞–Ω—Ä, –ì–µ—Ä–æ–π, –¶–µ–ª—å"
    )
    
    if uploaded_file:
        content = uploaded_file.read().decode('utf-8')
        st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞", content, height=200, disabled=True)
        
        if st.button("üéÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", use_container_width=True):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_path = Path("temp") / uploaded_file.name
                temp_path.parent.mkdir(exist_ok=True)
                temp_path.write_text(content, encoding='utf-8')
                
                try:
                    quest = st.session_state.generator.generate(str(temp_path))
                    st.session_state.current_quest = quest
                    st.success("–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    temp_path.unlink()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


def generate_basic_quest(genre, hero, goal, language, temperature):
    """–ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞"""
    with st.spinner("üéÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥"):
        try:
            scenario = ScenarioInput(
                genre=genre,
                hero=hero,
                goal=goal,
                language=language
            )
            
            config = GenerationConfig(
                temperature=temperature,
                use_rag=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã callbacks –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)
            for i in range(101):
                progress_bar.progress(i)
                if i < 20:
                    status_text.text("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π...")
                elif i < 40:
                    status_text.text("üß† –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–≤–µ—Å—Ç–∞...")
                elif i < 70:
                    status_text.text("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—ã...")
                elif i < 90:
                    status_text.text("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å...")
                else:
                    status_text.text("‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
                time.sleep(0.01)
            
            # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            quest = st.session_state.generator.generate(scenario.dict())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.session_state.current_quest = quest
            st.session_state.quest_history.append({
                'timestamp': datetime.now(),
                'quest': quest,
                'type': 'basic'
            })
            
            progress_bar.empty()
            status_text.empty()
            st.success("‚úÖ –ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


def generate_advanced_quest(genre, hero, goal, with_logic, with_visuals, 
                          export_code, visual_style, enable_dynamic):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞"""
    with st.spinner("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."):
        try:
            scenario = ScenarioInput(
                genre=genre,
                hero=hero,
                goal=goal,
                language="ru"
            )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å —ç—Ç–∞–ø–∞–º–∏
            progress_container = st.container()
            with progress_container:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                stages = [
                    (0.2, "üìù –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞..."),
                    (0.4, "üß† –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ Story2Game...") if with_logic else None,
                    (0.6, "üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ SceneCraft...") if with_visuals else None,
                    (0.8, "üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–æ–¥–∞...") if export_code else None,
                    (1.0, "‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è...")
                ]
                stages = [s for s in stages if s is not None]
                
                # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                for progress, message in stages:
                    status_text.text(message)
                    for i in range(int((progress - progress_bar.progress()) * 100)):
                        progress_bar.progress(progress_bar.progress() + 0.01)
                        time.sleep(0.02)
            
            # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π)
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            result = loop.run_until_complete(
                st.session_state.integrated_generator.generate_enhanced_quest(
                    scenario,
                    with_logic=with_logic,
                    with_visuals=with_visuals,
                    export_code=export_code
                )
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.session_state.current_quest = result['quest']
            st.session_state.current_enhanced_result = result
            st.session_state.quest_history.append({
                'timestamp': datetime.now(),
                'quest': result['quest'],
                'type': 'advanced',
                'enhancements': result['enhancements']
            })
            
            progress_container.empty()
            st.success("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            show_enhanced_results(result)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            st.code(traceback.format_exc())


def show_quest_result():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    quest = st.session_state.current_quest
    
    st.markdown("---")
    st.subheader(f"üìñ {quest.title}")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞
    meta_cols = st.columns(4)
    with meta_cols[0]:
        st.metric("–ñ–∞–Ω—Ä", quest.genre)
    with meta_cols[1]:
        st.metric("–°—Ü–µ–Ω", len(quest.scenes))
    with meta_cols[2]:
        st.metric("–ü—É—Ç–µ–π", len(quest.paths) if quest.paths else "N/A")
    with meta_cols[3]:
        st.metric("–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", f"{quest.metadata.get('generation_time', 0):.1f}—Å")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    view_tabs = st.tabs(["üìù –°—Ü–µ–Ω—ã", "üó∫Ô∏è –ì—Ä–∞—Ñ –∫–≤–µ—Å—Ç–∞", "üíæ JSON", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    with view_tabs[0]:
        show_scenes_view(quest)
    
    with view_tabs[1]:
        show_quest_graph(quest)
    
    with view_tabs[2]:
        show_json_view(quest)
    
    with view_tabs[3]:
        show_quest_statistics(quest)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_cols = st.columns(4)
    with action_cols[0]:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
            save_quest(quest)
    with action_cols[1]:
        if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç", use_container_width=True):
            export_quest(quest)
    with action_cols[2]:
        if st.button("üéÆ –ò–≥—Ä–∞—Ç—å", use_container_width=True):
            st.info("–†–µ–∂–∏–º –∏–≥—Ä—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    with action_cols[3]:
        if st.button("üîÑ –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç", use_container_width=True):
            st.session_state.current_quest = None
            st.rerun()


def show_scenes_view(quest):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω –∫–≤–µ—Å—Ç–∞"""
    for i, scene in enumerate(quest.scenes):
        with st.expander(f"–°—Ü–µ–Ω–∞ {i+1}: {scene.scene_id}", expanded=(i==0)):
            st.markdown(f"**–¢–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã:**")
            st.write(scene.text)
            
            if scene.mood:
                st.caption(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {scene.mood}")
            if scene.location:
                st.caption(f"–õ–æ–∫–∞—Ü–∏—è: {scene.location}")
            
            st.markdown("**–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞:**")
            for j, choice in enumerate(scene.choices):
                st.write(f"{j+1}. {choice.text} ‚Üí *{choice.next_scene}*")


def show_quest_graph(quest):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –∫–≤–µ—Å—Ç–∞"""
    import networkx as nx
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
    G = nx.DiGraph()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    for scene in quest.scenes:
        G.add_node(scene.scene_id, 
                  label=f"{scene.scene_id}\n{scene.text[:30]}...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞
    edge_labels = {}
    for scene in quest.scenes:
        for choice in scene.choices:
            if choice.next_scene:
                G.add_edge(scene.scene_id, choice.next_scene)
                edge_labels[(scene.scene_id, choice.next_scene)] = choice.text[:20] + "..."
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å plotly
    pos = nx.spring_layout(G, k=2, iterations=50)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞
    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        fig.add_trace(go.Scatter(
            x=[x0, x1, None],
            y=[y0, y1, None],
            mode='lines',
            line=dict(width=1, color='gray'),
            showlegend=False
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    node_x = []
    node_y = []
    node_text = []
    
    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        node_text.append(G.nodes[node]['label'])
    
    fig.add_trace(go.Scatter(
        x=node_x,
        y=node_y,
        mode='markers+text',
        marker=dict(
            size=30,
            color='#667eea',
            line=dict(width=2, color='white')
        ),
        text=node_text,
        textposition='top center',
        showlegend=False
    ))
    
    fig.update_layout(
        showlegend=False,
        hovermode='closest',
        margin=dict(b=0,l=0,r=0,t=0),
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        height=600
    )
    
    st.plotly_chart(fig, use_container_width=True)


def show_json_view(quest):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    quest_dict = quest.dict()
    json_str = json.dumps(quest_dict, ensure_ascii=False, indent=2)
    
    st.code(json_str, language='json')
    
    # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_str,
        file_name=f"quest_{quest.title.replace(' ', '_')}.json",
        mime="application/json"
    )


def show_quest_statistics(quest):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–µ—Å—Ç–∞"""
    col1, col2 = st.columns(2)
    
    with col1:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ü–µ–Ω–∞–º
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ö
        choices_data = pd.DataFrame({
            '–°—Ü–µ–Ω–∞': [s.scene_id for s in quest.scenes],
            '–í—ã–±–æ—Ä–æ–≤': [len(s.choices) for s in quest.scenes]
        })
        
        fig = px.bar(choices_data, x='–°—Ü–µ–Ω–∞', y='–í—ã–±–æ—Ä–æ–≤', 
                    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤ –ø–æ —Å—Ü–µ–Ω–∞–º")
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω
        text_lengths = pd.DataFrame({
            '–°—Ü–µ–Ω–∞': [s.scene_id for s in quest.scenes],
            '–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞': [len(s.text) for s in quest.scenes]
        })
        
        fig2 = px.line(text_lengths, x='–°—Ü–µ–Ω–∞', y='–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞',
                      title="–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω", markers=True)
        st.plotly_chart(fig2, use_container_width=True)
    
    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π
        st.subheader("üõ§Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π")
        
        if quest.paths:
            paths_data = pd.DataFrame({
                '–ü—É—Ç—å': [p.path_id for p in quest.paths],
                '–î–ª–∏–Ω–∞': [p.length for p in quest.paths],
                '–ò—Å—Ö–æ–¥': [p.outcome or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' for p in quest.paths]
            })
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª–∏–Ω –ø—É—Ç–µ–π
            fig3 = px.bar(paths_data, x='–ü—É—Ç—å', y='–î–ª–∏–Ω–∞', color='–ò—Å—Ö–æ–¥',
                         title="–î–ª–∏–Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π")
            st.plotly_chart(fig3, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ö–æ–¥–æ–≤
            outcome_counts = paths_data['–ò—Å—Ö–æ–¥'].value_counts()
            fig4 = px.pie(values=outcome_counts.values, names=outcome_counts.index,
                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–æ–≤")
            st.plotly_chart(fig4, use_container_width=True)


def show_enhanced_results(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    st.markdown("---")
    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
    tabs = ["üìñ –ö–≤–µ—Å—Ç"]
    if 'logic' in result['enhancements']:
        tabs.append("üß† –õ–æ–≥–∏–∫–∞")
    if 'visualization' in result['enhancements']:
        tabs.append("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    if 'generated_code' in result['enhancements']:
        tabs.append("üíª –ö–æ–¥")
    
    tabs_ui = st.tabs(tabs)
    
    # –ë–∞–∑–æ–≤—ã–π –∫–≤–µ—Å—Ç
    with tabs_ui[0]:
        show_quest_result()
    
    # –õ–æ–≥–∏–∫–∞
    if 'üß† –õ–æ–≥–∏–∫–∞' in tabs:
        with tabs_ui[tabs.index('üß† –õ–æ–≥–∏–∫–∞')]:
            show_logic_view(result['enhancements']['logic'])
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    if 'üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è' in tabs:
        with tabs_ui[tabs.index('üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è')]:
            show_visualization_view(result['enhancements']['visualization'])
    
    # –ö–æ–¥
    if 'üíª –ö–æ–¥' in tabs:
        with tabs_ui[tabs.index('üíª –ö–æ–¥')]:
            show_code_view(result['enhancements']['generated_code'])


def show_logic_view(logic_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ Story2Game"""
    st.subheader("üß† –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞")
    
    # –ú–∏—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    with st.expander("üåç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞"):
        st.json(logic_data['world_state'])
    
    # –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è")
        for action_id, preconditions in list(logic_data['preconditions'].items())[:5]:
            if preconditions:
                st.write(f"**{action_id}:**")
                for precond in preconditions:
                    st.write(f"- {precond}")
    
    with col2:
        st.subheader("‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã")
        for action_id, effects in list(logic_data['effects'].items())[:5]:
            if effects:
                st.write(f"**{action_id}:**")
                for effect in effects:
                    st.write(f"- {effect}")
    
    # –ì—Ä–∞—Ñ –¥–µ–π—Å—Ç–≤–∏–π
    st.subheader("üîÄ –ì—Ä–∞—Ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π")
    action_graph_df = []
    for scene_id, actions in logic_data['action_graph'].items():
        for action in actions:
            action_graph_df.append({
                '–°—Ü–µ–Ω–∞': scene_id,
                '–î–µ–π—Å—Ç–≤–∏–µ': action['action_id'],
                '–î–æ—Å—Ç—É–ø–Ω–æ': '‚úÖ' if action['available'] else '‚ùå',
                '–°–ª–µ–¥—É—é—â–∞—è —Å—Ü–µ–Ω–∞': action['next_scene']
            })
    
    if action_graph_df:
        df = pd.DataFrame(action_graph_df)
        st.dataframe(df, use_container_width=True)


def show_visualization_view(viz_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ SceneCraft"""
    st.subheader("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω")
    
    st.info(f"–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω: {len(viz_data['scenes'])}")
    st.metric("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª–æ–≤", 
              f"{viz_data['enhanced_features']['visual_consistency_score']:.0%}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω
    for scene_viz in viz_data['scenes'][:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ü–µ–Ω—ã
        with st.expander(f"–°—Ü–µ–Ω–∞ {scene_viz['scene_id']}"):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # –ö–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if 'composite_path' in scene_viz:
                    try:
                        image = Image.open(scene_viz['composite_path'])
                        st.image(image, caption="–ú–Ω–æ–≥–æ—Ä–∞–∫—É—Ä—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", 
                                use_column_width=True)
                    except:
                        st.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                else:
                    st.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
            
            with col2:
                st.write("**–ú–∞–∫–µ—Ç —Å—Ü–µ–Ω—ã:**")
                if 'layout_path' in scene_viz:
                    try:
                        with open(scene_viz['layout_path'], 'r') as f:
                            layout = json.load(f)
                        st.json(layout)
                    except:
                        st.info("–ú–∞–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def show_code_view(generated_code):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    st.subheader("üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥")
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    lang = st.selectbox("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", ["Python", "JavaScript"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥
    st.code(generated_code, language=lang.lower())
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    file_ext = "py" if lang == "Python" else "js"
    st.download_button(
        label=f"üì• –°–∫–∞—á–∞—Ç—å {lang} –∫–æ–¥",
        data=generated_code,
        file_name=f"quest_logic.{file_ext}",
        mime="text/plain"
    )


def show_analytics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    if not st.session_state.quest_history:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–≤–µ—Å—Ç–æ–≤!")
        return
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    metrics = st.columns(4)
    with metrics[0]:
        st.metric("–í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤", len(st.session_state.quest_history))
    with metrics[1]:
        avg_scenes = sum(len(h['quest'].scenes) for h in st.session_state.quest_history) / len(st.session_state.quest_history)
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å—Ü–µ–Ω", f"{avg_scenes:.1f}")
    with metrics[2]:
        basic_count = sum(1 for h in st.session_state.quest_history if h['type'] == 'basic')
        st.metric("–ë–∞–∑–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", basic_count)
    with metrics[3]:
        advanced_count = sum(1 for h in st.session_state.quest_history if h['type'] == 'advanced')
        st.metric("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", advanced_count)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∂–∞–Ω—Ä–∞–º
        genres = [h['quest'].genre for h in st.session_state.quest_history]
        genre_counts = pd.Series(genres).value_counts()
        
        fig = px.pie(values=genre_counts.values, names=genre_counts.index,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∂–∞–Ω—Ä–∞–º")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        times = [h['timestamp'] for h in st.session_state.quest_history]
        times_df = pd.DataFrame({'timestamp': times, 'count': 1})
        times_df['date'] = times_df['timestamp'].dt.date
        daily_counts = times_df.groupby('date')['count'].sum().reset_index()
        
        fig = px.line(daily_counts, x='date', y='count',
                     title="–ö–≤–µ—Å—Ç—ã –ø–æ –¥–Ω—è–º", markers=True)
        st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–µ—Å—Ç–æ–≤
    quest_data = []
    for h in st.session_state.quest_history:
        quest = h['quest']
        quest_data.append({
            '–í—Ä–µ–º—è': h['timestamp'].strftime('%Y-%m-%d %H:%M'),
            '–ù–∞–∑–≤–∞–Ω–∏–µ': quest.title,
            '–ñ–∞–Ω—Ä': quest.genre,
            '–°—Ü–µ–Ω': len(quest.scenes),
            '–¢–∏–ø': h['type'],
            '–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏': f"{quest.metadata.get('generation_time', 0):.1f}—Å"
        })
    
    df = pd.DataFrame(quest_data)
    st.dataframe(df, use_container_width=True)


def show_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    st.header("üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤")
    
    if not st.session_state.quest_history:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç!")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        filter_genre = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É", 
                                   ["–í—Å–µ"] + list(set(h['quest'].genre for h in st.session_state.quest_history)))
    with col2:
        filter_type = st.selectbox("–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", ["–í—Å–µ", "basic", "advanced"])
    with col3:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", ["–ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏", "–°—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏", "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_history = st.session_state.quest_history
    
    if filter_genre != "–í—Å–µ":
        filtered_history = [h for h in filtered_history if h['quest'].genre == filter_genre]
    
    if filter_type != "–í—Å–µ":
        filtered_history = [h for h in filtered_history if h['type'] == filter_type]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "–ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏":
        filtered_history = sorted(filtered_history, key=lambda x: x['timestamp'], reverse=True)
    elif sort_by == "–°—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏":
        filtered_history = sorted(filtered_history, key=lambda x: x['timestamp'])
    else:
        filtered_history = sorted(filtered_history, key=lambda x: x['quest'].title)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for i, history_item in enumerate(filtered_history):
        quest = history_item['quest']
        
        with st.expander(f"{quest.title} - {history_item['timestamp'].strftime('%Y-%m-%d %H:%M')}"):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**–ñ–∞–Ω—Ä:** {quest.genre}")
                st.write(f"**–ì–µ—Ä–æ–π:** {quest.hero}")
                st.write(f"**–¶–µ–ª—å:** {quest.goal}")
                st.write(f"**–°—Ü–µ–Ω:** {len(quest.scenes)}")
                st.write(f"**–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {history_item['type']}")
            
            with col2:
                if st.button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{i}"):
                    st.session_state.current_quest = quest
                    st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{i}"):
                    export_quest(quest)
                
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{i}"):
                    st.session_state.quest_history.remove(history_item)
                    st.rerun()


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader("üîë API –∫–ª—é—á–∏")
    
    openai_key = st.text_input("OpenAI API Key", type="password", 
                              value=st.session_state.get('openai_key', ''))
    anthropic_key = st.text_input("Anthropic API Key", type="password",
                                 value=st.session_state.get('anthropic_key', ''))
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
        st.session_state.openai_key = openai_key
        st.session_state.anthropic_key = anthropic_key
        st.success("–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    default_model = st.selectbox("–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", 
                                ["gpt-4", "gpt-3.5-turbo", "claude-3-opus"])
    default_temp = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", 0.0, 1.0, 0.8, 0.1)
    default_rag = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", value=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    st.subheader("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    
    theme = st.selectbox("–¢–µ–º–∞", ["–°–≤–µ—Ç–ª–∞—è", "–¢—ë–º–Ω–∞—è", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"])
    show_tips = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏", value=True)
    auto_save = st.checkbox("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤", value=True)
    
    # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
    st.subheader("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"):
        with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π..."):
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è knowledge base
            st.session_state.generator.knowledge_base = KnowledgeBase()
            st.success("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    # –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", use_container_width=True):
            # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON
            history_data = []
            for h in st.session_state.quest_history:
                history_data.append({
                    'timestamp': h['timestamp'].isoformat(),
                    'quest': h['quest'].dict(),
                    'type': h['type']
                })
            
            json_str = json.dumps(history_data, ensure_ascii=False, indent=2)
            st.download_button(
                "üíæ –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                data=json_str,
                file_name="quest_history.json",
                mime="application/json"
            )
    
    with col2:
        uploaded_history = st.file_uploader("üì• –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", type=['json'])
        if uploaded_history:
            # –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
            st.info("–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


def show_help_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    st.header("üìö –°–ø—Ä–∞–≤–∫–∞")
    
    # –†–∞–∑–¥–µ–ª—ã —Å–ø—Ä–∞–≤–∫–∏
    help_sections = {
        "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç": """
        1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä**
        2. –í—ã–±–µ—Ä–∏—Ç–µ **–∂–∞–Ω—Ä** –≤–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞
        3. –û–ø–∏—à–∏—Ç–µ **–≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è**
        4. –£–∫–∞–∂–∏—Ç–µ **—Ü–µ–ª—å** –∫–≤–µ—Å—Ç–∞
        5. –ù–∞–∂–º–∏—Ç–µ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç**
        6. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (30-60 —Å–µ–∫—É–Ω–¥)
        """,
        
        "üìù –§–æ—Ä–º–∞—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": """
        **–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª** –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
        ```
        –ñ–∞–Ω—Ä: [–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞]
        –ì–µ—Ä–æ–π: [–æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ—Ä–æ—è]
        –¶–µ–ª—å: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏]
        ```
        
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∂–∞–Ω—Ä—ã:**
        - –ö–∏–±–µ—Ä–ø–∞–Ω–∫
        - –§—ç–Ω—Ç–µ–∑–∏
        - –î–µ—Ç–µ–∫—Ç–∏–≤
        - –•–æ—Ä—Ä–æ—Ä
        - –ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞
        - –ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å
        - –°—Ç–∏–º–ø–∞–Ω–∫
        """,
        
        "üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è": """
        **Story2Game –ª–æ–≥–∏–∫–∞** –¥–æ–±–∞–≤–ª—è–µ—Ç:
        - –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        - –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
        - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞
        - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
        
        **SceneCraft –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è** —Å–æ–∑–¥–∞–µ—Ç:
        - 3D-–º–∞–∫–µ—Ç—ã —Å—Ü–µ–Ω
        - –ú–Ω–æ–≥–æ—Ä–∞–∫—É—Ä—Å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        - –ö–∞—Ä—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        - –í–∏–∑—É–∞–ª—å–Ω—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        """,
        
        "üíæ –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞": """
        - **JSON** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–≤–µ—Å—Ç–∞
        - **Unity** - –ø—Ä–µ—Ñ–∞–±—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã
        - **Unreal Engine** - –±–ª—é–ø—Ä–∏–Ω—Ç—ã
        - **Python/JS** - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥
        - **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω
        """,
        
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã": """
        **Q: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è?**
        A: –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 30-60 —Å–µ–∫—É–Ω–¥, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è - 2-5 –º–∏–Ω—É—Ç
        
        **Q: –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**
        A: –†—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        
        **Q: –ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç?**
        A: –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON –∏ —Ä—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        **Q: –ù—É–∂–µ–Ω –ª–∏ API –∫–ª—é—á?**
        A: –î–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è OpenAI –∏–ª–∏ Anthropic API –∫–ª—é—á
        """
    }
    
    for section, content in help_sections.items():
        with st.expander(section, expanded=(section == "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")):
            st.markdown(content)
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
    st.subheader("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("üìñ [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://github.com/yourusername/game-story-ai)")
    with col2:
        st.markdown("üêõ [–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ](https://github.com/yourusername/game-story-ai/issues)")
    with col3:
        st.markdown("üí¨ [–°–æ–æ–±—â–µ—Å—Ç–≤–æ](https://discord.gg/yourdiscord)")


def save_quest(quest):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_dir = Path("saved_quests")
        save_dir.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"{quest.title.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = save_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(quest.dict(), f, ensure_ascii=False, indent=2)
        
        st.success(f"‚úÖ –ö–≤–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def export_quest(quest):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–≤–µ—Å—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    with st.expander("üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞", expanded=True):
        format_type = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ["JSON", "Unity Package", "Unreal Blueprint", "Python Code", "JavaScript Code"]
        )
        
        include_metadata = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", value=True)
        include_visuals = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", value=False)
        
        if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
            st.info(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


if __name__ == "__main__":
    main()